// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/client.dart';
import 'api/client/builder.dart';
import 'api/client/notification.dart';
import 'api/client/options.dart';
import 'api/client/output.dart';
import 'api/database.dart';
import 'api/database/events.dart';
import 'api/protocol/event.dart';
import 'api/protocol/event/builder.dart';
import 'api/protocol/event/id.dart';
import 'api/protocol/event/tag.dart';
import 'api/protocol/event/unsigned.dart';
import 'api/protocol/filter.dart';
import 'api/protocol/key.dart';
import 'api/protocol/key/public_key.dart';
import 'api/protocol/key/secret_key.dart';
import 'api/protocol/nips/nip59.dart';
import 'api/protocol/signer.dart';
import 'api/relay/options.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class NostrSdk
    extends BaseEntrypoint<NostrSdkApi, NostrSdkApiImpl, NostrSdkWire> {
  @internal
  static final instance = NostrSdk._();

  NostrSdk._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    NostrSdkApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required NostrSdkApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<NostrSdkApiImpl, NostrSdkWire> get apiImplConstructor =>
      NostrSdkApiImpl.new;

  @override
  WireConstructor<NostrSdkWire> get wireConstructor =>
      NostrSdkWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.7.1';

  @override
  int get rustContentHash => -902043156;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'nostr_sdk',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class NostrSdkApi extends BaseApi {
  Client crateApiClientBuilderClientBuilderBuild({required ClientBuilder that});

  ClientBuilder crateApiClientBuilderClientBuilderDatabase(
      {required ClientBuilder that, required NostrDatabase database});

  ClientBuilder crateApiClientBuilderClientBuilderNew();

  ClientBuilder crateApiClientBuilderClientBuilderOpts(
      {required ClientBuilder that, required ClientOptions opts});

  ClientBuilder crateApiClientBuilderClientBuilderSigner(
      {required ClientBuilder that, required NostrSigner signer});

  ClientOptions crateApiClientOptionsClientOptionsAutoconnect(
      {required ClientOptions that, required bool val});

  ClientOptions crateApiClientOptionsClientOptionsAutomaticAuthentication(
      {required ClientOptions that, required bool enabled});

  ClientOptions crateApiClientOptionsClientOptionsConnection(
      {required ClientOptions that, required Connection connection});

  ClientOptions crateApiClientOptionsClientOptionsGossip(
      {required ClientOptions that, required bool enabled});

  ClientOptions crateApiClientOptionsClientOptionsMinPow(
      {required ClientOptions that, required int difficulty});

  ClientOptions crateApiClientOptionsClientOptionsNew();

  Future<bool> crateApiClientClientAddDiscoveryRelay(
      {required Client that, required String url});

  Future<bool> crateApiClientClientAddReadRelay(
      {required Client that, required String url});

  Future<bool> crateApiClientClientAddRelay(
      {required Client that, required String url});

  Future<bool> crateApiClientClientAddWriteRelay(
      {required Client that, required String url});

  void crateApiClientClientAutomaticAuthentication(
      {required Client that, required bool enable});

  ClientBuilder crateApiClientClientBuilder();

  Future<void> crateApiClientClientConnect({required Client that});

  Future<void> crateApiClientClientConnectRelay(
      {required Client that, required String url});

  Future<NostrDatabase> crateApiClientClientDatabase({required Client that});

  Future<void> crateApiClientClientDisconnect({required Client that});

  Future<void> crateApiClientClientDisconnectRelay(
      {required Client that, required String url});

  Future<Events> crateApiClientClientFetchEvents(
      {required Client that,
      required Filter filter,
      required Duration timeout});

  Future<Events> crateApiClientClientFetchEventsFrom(
      {required Client that,
      required List<String> urls,
      required Filter filter,
      required Duration timeout});

  Future<void> crateApiClientClientForceRemoveAllRelays({required Client that});

  Future<void> crateApiClientClientForceRemoveRelay(
      {required Client that, required String url});

  Stream<RelayPoolNotification> crateApiClientClientHandleNotifications(
      {required Client that});

  Future<bool> crateApiClientClientHasSigner({required Client that});

  Client crateApiClientClientNew();

  Future<void> crateApiClientClientRemoveAllRelays({required Client that});

  Future<void> crateApiClientClientRemoveRelay(
      {required Client that, required String url});

  Future<void> crateApiClientClientReset({required Client that});

  Future<SendEventOutput> crateApiClientClientSendEvent(
      {required Client that, required Event event});

  Future<SendEventOutput> crateApiClientClientSendEventBuilder(
      {required Client that, required EventBuilder builder});

  Future<SendEventOutput> crateApiClientClientSendEventTo(
      {required Client that, required List<String> urls, required Event event});

  Future<void> crateApiClientClientSetSigner(
      {required Client that, required NostrSigner signer});

  Future<void> crateApiClientClientShutdown({required Client that});

  Future<NostrSigner> crateApiClientClientSigner({required Client that});

  Future<String> crateApiClientClientSubscribe(
      {required Client that,
      required Filter filter,
      SubscribeAutoCloseOptions? opts});

  Future<String> crateApiClientClientSubscribeTo(
      {required Client that,
      required List<String> urls,
      required Filter filter,
      SubscribeAutoCloseOptions? opts});

  Future<void> crateApiClientClientSubscribeWithId(
      {required Client that,
      required String id,
      required Filter filter,
      SubscribeAutoCloseOptions? opts});

  Future<void> crateApiClientClientSubscribeWithIdTo(
      {required Client that,
      required List<String> urls,
      required String id,
      required Filter filter,
      SubscribeAutoCloseOptions? opts});

  Future<void> crateApiClientClientUnsetSigner({required Client that});

  Connection crateApiClientOptionsConnectionAddr(
      {required Connection that, required String addr});

  Connection crateApiClientOptionsConnectionEmbeddedTor(
      {required Connection that});

  Connection crateApiClientOptionsConnectionEmbeddedTorWithPath(
      {required Connection that, required String dataPath});

  Connection crateApiClientOptionsConnectionMode(
      {required Connection that, required ConnectionMode mode});

  Connection crateApiClientOptionsConnectionNew();

  Connection crateApiClientOptionsConnectionTarget(
      {required Connection that, required ConnectionTarget target});

  UnsignedEvent crateApiProtocolEventBuilderEventBuilderBuild(
      {required EventBuilder that, required PublicKey publicKey});

  EventBuilder crateApiProtocolEventBuilderEventBuilderCustomCreatedAt(
      {required EventBuilder that, required BigInt createdAt});

  Future<Event> crateApiProtocolEventBuilderEventBuilderGiftWrap(
      {required NostrSigner signer,
      required PublicKey receiver,
      required UnsignedEvent rumor,
      required List<Tag> extraTags});

  Event crateApiProtocolEventBuilderEventBuilderGiftWrapFromSeal(
      {required PublicKey receiver,
      required Event seal,
      required List<Tag> extraTags});

  EventBuilder crateApiProtocolEventBuilderEventBuilderNew(
      {required int kind, required String content});

  EventBuilder crateApiProtocolEventBuilderEventBuilderPow(
      {required EventBuilder that, required int difficulty});

  Future<Event> crateApiProtocolEventBuilderEventBuilderPrivateMsg(
      {required NostrSigner signer,
      required PublicKey receiver,
      required String message,
      required List<Tag> rumorExtraTags});

  Future<EventBuilder> crateApiProtocolEventBuilderEventBuilderSeal(
      {required NostrSigner signer,
      required PublicKey receiver,
      required UnsignedEvent rumor});

  Future<Event> crateApiProtocolEventBuilderEventBuilderSign(
      {required EventBuilder that, required NostrSigner signer});

  Event crateApiProtocolEventBuilderEventBuilderSignWithKeys(
      {required EventBuilder that, required Keys keys});

  EventBuilder crateApiProtocolEventBuilderEventBuilderTag(
      {required EventBuilder that, required Tag tag});

  EventBuilder crateApiProtocolEventBuilderEventBuilderTags(
      {required EventBuilder that, required List<Tag> tags});

  EventBuilder crateApiProtocolEventBuilderEventBuilderTextNote(
      {required String content});

  EventId crateApiProtocolEventIdEventIdFromSlice({required List<int> bytes});

  EventId crateApiProtocolEventIdEventIdNew(
      {required PublicKey publicKey,
      required BigInt createdAt,
      required int kind,
      required List<Tag> tags,
      required String content});

  EventId crateApiProtocolEventIdEventIdParse({required String id});

  String crateApiProtocolEventIdEventIdToBech32({required EventId that});

  Uint8List crateApiProtocolEventIdEventIdToBytes({required EventId that});

  String crateApiProtocolEventIdEventIdToHex({required EventId that});

  String crateApiProtocolEventIdEventIdToNostrUri({required EventId that});

  String crateApiProtocolEventEventAsJson({required Event that});

  String crateApiProtocolEventEventAsPrettyJson({required Event that});

  PublicKey crateApiProtocolEventEventAuthor({required Event that});

  String crateApiProtocolEventEventContent({required Event that});

  BigInt crateApiProtocolEventEventCreatedAt({required Event that});

  Event crateApiProtocolEventEventFromJson({required String json});

  EventId crateApiProtocolEventEventId({required Event that});

  bool crateApiProtocolEventEventIsExpired({required Event that});

  bool crateApiProtocolEventEventIsProtected({required Event that});

  int crateApiProtocolEventEventKind({required Event that});

  String crateApiProtocolEventEventSignature({required Event that});

  List<Tag> crateApiProtocolEventEventTags({required Event that});

  void crateApiProtocolEventEventVerify({required Event that});

  bool crateApiProtocolEventEventVerifyId({required Event that});

  bool crateApiProtocolEventEventVerifySignature({required Event that});

  bool crateApiDatabaseEventsEventsContains(
      {required Events that, required Event event});

  Event? crateApiDatabaseEventsEventsFirst({required Events that});

  bool crateApiDatabaseEventsEventsIsEmpty({required Events that});

  BigInt crateApiDatabaseEventsEventsLen({required Events that});

  Events crateApiDatabaseEventsEventsMerge(
      {required Events that, required Events other});

  List<Event> crateApiDatabaseEventsEventsToVec({required Events that});

  String crateApiProtocolFilterFilterAsJson({required Filter that});

  Filter crateApiProtocolFilterFilterAuthor(
      {required Filter that, required PublicKey author});

  Filter crateApiProtocolFilterFilterAuthors(
      {required Filter that, required List<PublicKey> authors});

  Filter crateApiProtocolFilterFilterCustomTag(
      {required Filter that,
      required SingleLetterTag tag,
      required String content});

  Filter crateApiProtocolFilterFilterCustomTags(
      {required Filter that,
      required SingleLetterTag tag,
      required List<String> content});

  Filter crateApiProtocolFilterFilterEvent(
      {required Filter that, required EventId id});

  Filter crateApiProtocolFilterFilterEvents(
      {required Filter that, required List<EventId> ids});

  Filter crateApiProtocolFilterFilterFromJson({required String json});

  Filter crateApiProtocolFilterFilterHashtag(
      {required Filter that, required String hashtag});

  Filter crateApiProtocolFilterFilterHashtags(
      {required Filter that, required List<String> hashtags});

  Filter crateApiProtocolFilterFilterId(
      {required Filter that, required EventId id});

  Filter crateApiProtocolFilterFilterIdentifier(
      {required Filter that, required String identifier});

  Filter crateApiProtocolFilterFilterIdentifiers(
      {required Filter that, required List<String> identifiers});

  Filter crateApiProtocolFilterFilterIds(
      {required Filter that, required List<EventId> ids});

  bool crateApiProtocolFilterFilterIsEmpty({required Filter that});

  Filter crateApiProtocolFilterFilterKind(
      {required Filter that, required int kind});

  Filter crateApiProtocolFilterFilterKinds(
      {required Filter that, required List<int> kinds});

  Filter crateApiProtocolFilterFilterLimit(
      {required Filter that, required BigInt limit});

  bool crateApiProtocolFilterFilterMatchEvent(
      {required Filter that, required Event event});

  Filter crateApiProtocolFilterFilterNew();

  Filter crateApiProtocolFilterFilterPubkey(
      {required Filter that, required PublicKey pubkey});

  Filter crateApiProtocolFilterFilterPubkeys(
      {required Filter that, required List<PublicKey> pubkeys});

  Filter crateApiProtocolFilterFilterReference(
      {required Filter that, required String reference});

  Filter crateApiProtocolFilterFilterReferences(
      {required Filter that, required List<String> references});

  Filter crateApiProtocolFilterFilterRemoveAuthors(
      {required Filter that, required List<PublicKey> authors});

  Filter crateApiProtocolFilterFilterRemoveCustomTags(
      {required Filter that,
      required SingleLetterTag tag,
      required List<String> content});

  Filter crateApiProtocolFilterFilterRemoveEvents(
      {required Filter that, required List<EventId> ids});

  Filter crateApiProtocolFilterFilterRemoveHashtags(
      {required Filter that, required List<String> hashtags});

  Filter crateApiProtocolFilterFilterRemoveIdentifiers(
      {required Filter that, required List<String> identifiers});

  Filter crateApiProtocolFilterFilterRemoveIds(
      {required Filter that, required List<EventId> ids});

  Filter crateApiProtocolFilterFilterRemoveKinds(
      {required Filter that, required List<int> kinds});

  Filter crateApiProtocolFilterFilterRemoveLimit({required Filter that});

  Filter crateApiProtocolFilterFilterRemovePubkeys(
      {required Filter that, required List<PublicKey> pubkeys});

  Filter crateApiProtocolFilterFilterRemoveReferences(
      {required Filter that, required List<String> references});

  Filter crateApiProtocolFilterFilterRemoveSearch({required Filter that});

  Filter crateApiProtocolFilterFilterRemoveSince({required Filter that});

  Filter crateApiProtocolFilterFilterRemoveUntil({required Filter that});

  Filter crateApiProtocolFilterFilterSearch(
      {required Filter that, required String text});

  Filter crateApiProtocolFilterFilterSince(
      {required Filter that, required BigInt timestamp});

  Filter crateApiProtocolFilterFilterUntil(
      {required Filter that, required BigInt timestamp});

  Keys crateApiProtocolKeyKeysGenerate();

  Keys crateApiProtocolKeyKeysNew({required SecretKey secretKey});

  Keys crateApiProtocolKeyKeysParse({required String secretKey});

  PublicKey crateApiProtocolKeyKeysPublicKey({required Keys that});

  SecretKey crateApiProtocolKeyKeysSecretKey({required Keys that});

  Future<BigInt> crateApiDatabaseNostrDatabaseCount(
      {required NostrDatabase that, required Filter filter});

  Future<void> crateApiDatabaseNostrDatabaseDelete(
      {required NostrDatabase that, required Filter filter});

  Future<Event?> crateApiDatabaseNostrDatabaseEventById(
      {required NostrDatabase that, required EventId eventId});

  NostrDatabase crateApiDatabaseNostrDatabaseLmdb({required String path});

  Future<Events> crateApiDatabaseNostrDatabaseQuery(
      {required NostrDatabase that, required Filter filter});

  Future<SaveEventStatus> crateApiDatabaseNostrDatabaseSaveEvent(
      {required NostrDatabase that, required Event event});

  Future<void> crateApiDatabaseNostrDatabaseWipe({required NostrDatabase that});

  SignerBackend crateApiProtocolSignerNostrSignerBackend(
      {required NostrSigner that});

  Future<PublicKey> crateApiProtocolSignerNostrSignerGetPublicKey(
      {required NostrSigner that});

  NostrSigner crateApiProtocolSignerNostrSignerKeys({required Keys keys});

  Future<String> crateApiProtocolSignerNostrSignerNip04Decrypt(
      {required NostrSigner that,
      required PublicKey publicKey,
      required String encryptedContent});

  Future<String> crateApiProtocolSignerNostrSignerNip04Encrypt(
      {required NostrSigner that,
      required PublicKey publicKey,
      required String content});

  Future<String> crateApiProtocolSignerNostrSignerNip44Decrypt(
      {required NostrSigner that,
      required PublicKey publicKey,
      required String content});

  Future<String> crateApiProtocolSignerNostrSignerNip44Encrypt(
      {required NostrSigner that,
      required PublicKey publicKey,
      required String content});

  Future<Event> crateApiProtocolSignerNostrSignerSignEvent(
      {required NostrSigner that, required UnsignedEvent unsignedEvent});

  PublicKey crateApiProtocolKeyPublicKeyPublicKeyFromSlice(
      {required List<int> publicKey});

  PublicKey crateApiProtocolKeyPublicKeyPublicKeyParse(
      {required String publicKey});

  String crateApiProtocolKeyPublicKeyPublicKeyToBech32(
      {required PublicKey that});

  Uint8List crateApiProtocolKeyPublicKeyPublicKeyToBytes(
      {required PublicKey that});

  String crateApiProtocolKeyPublicKeyPublicKeyToHex({required PublicKey that});

  String crateApiProtocolKeyPublicKeyPublicKeyToNostrUri(
      {required PublicKey that});

  SecretKey crateApiProtocolKeySecretKeySecretKeyFromSlice(
      {required List<int> secretKey});

  SecretKey crateApiProtocolKeySecretKeySecretKeyGenerate();

  SecretKey crateApiProtocolKeySecretKeySecretKeyParse(
      {required String secretKey});

  String crateApiProtocolKeySecretKeySecretKeyToBech32(
      {required SecretKey that});

  String crateApiProtocolKeySecretKeySecretKeyToSecretHex(
      {required SecretKey that});

  bool crateApiProtocolFilterSingleLetterTagIsLowercase(
      {required SingleLetterTag that});

  bool crateApiProtocolFilterSingleLetterTagIsUppercase(
      {required SingleLetterTag that});

  SingleLetterTag crateApiProtocolFilterSingleLetterTagLowercase(
      {required Alphabet character});

  SingleLetterTag crateApiProtocolFilterSingleLetterTagUppercase(
      {required Alphabet character});

  SubscribeAutoCloseOptions
      crateApiRelayOptionsSubscribeAutoCloseOptionsExitPolicy(
          {required SubscribeAutoCloseOptions that,
          required ReqExitPolicy policy});

  SubscribeAutoCloseOptions
      crateApiRelayOptionsSubscribeAutoCloseOptionsIdleTimeout(
          {required SubscribeAutoCloseOptions that, Duration? timeout});

  SubscribeAutoCloseOptions crateApiRelayOptionsSubscribeAutoCloseOptionsNew();

  SubscribeAutoCloseOptions
      crateApiRelayOptionsSubscribeAutoCloseOptionsTimeout(
          {required SubscribeAutoCloseOptions that, Duration? timeout});

  List<String> crateApiProtocolEventTagTagAsVec({required Tag that});

  String? crateApiProtocolEventTagTagContent({required Tag that});

  bool crateApiProtocolEventTagTagIsProtected({required Tag that});

  bool crateApiProtocolEventTagTagIsReply({required Tag that});

  bool crateApiProtocolEventTagTagIsRoot({required Tag that});

  String crateApiProtocolEventTagTagKind({required Tag that});

  Tag crateApiProtocolEventTagTagParse({required List<String> tag});

  List<String> crateApiProtocolEventTagTagToVec({required Tag that});

  Event crateApiProtocolEventUnsignedUnsignedEventAddSignature(
      {required UnsignedEvent that, required String sig});

  String crateApiProtocolEventUnsignedUnsignedEventAsJson(
      {required UnsignedEvent that});

  String crateApiProtocolEventUnsignedUnsignedEventAsPrettyJson(
      {required UnsignedEvent that});

  PublicKey crateApiProtocolEventUnsignedUnsignedEventAuthor(
      {required UnsignedEvent that});

  String crateApiProtocolEventUnsignedUnsignedEventContent(
      {required UnsignedEvent that});

  BigInt crateApiProtocolEventUnsignedUnsignedEventCreatedAt(
      {required UnsignedEvent that});

  UnsignedEvent crateApiProtocolEventUnsignedUnsignedEventFromJson(
      {required String json});

  EventId? crateApiProtocolEventUnsignedUnsignedEventId(
      {required UnsignedEvent that});

  int crateApiProtocolEventUnsignedUnsignedEventKind(
      {required UnsignedEvent that});

  List<Tag> crateApiProtocolEventUnsignedUnsignedEventTags(
      {required UnsignedEvent that});

  Future<UnwrappedGift> crateApiProtocolNipsNip59UnwrappedGiftFromGiftWrap(
      {required NostrSigner signer, required Event giftWrap});

  UnsignedEvent crateApiProtocolNipsNip59UnwrappedGiftRumor(
      {required UnwrappedGift that});

  PublicKey crateApiProtocolNipsNip59UnwrappedGiftSender(
      {required UnwrappedGift that});

  Future<void> crateApiInitApp();

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Client;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Client;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ClientBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ClientBuilder;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ClientBuilderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ClientOptions;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ClientOptions;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ClientOptionsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Connection;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Connection;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ConnectionPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Event;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Event;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EventPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EventBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EventBuilder;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EventBuilderPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_EventId;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_EventId;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EventIdPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Events;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Events;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EventsPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Filter;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Filter;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FilterPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Keys;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Keys;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_KeysPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NostrDatabase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NostrDatabase;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NostrDatabasePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NostrSigner;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NostrSigner;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_NostrSignerPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PublicKey;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PublicKey;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PublicKeyPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SecretKey;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SecretKey;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SecretKeyPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SingleLetterTag;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SingleLetterTag;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SingleLetterTagPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SubscribeAutoCloseOptions;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SubscribeAutoCloseOptions;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SubscribeAutoCloseOptionsPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Tag;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Tag;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TagPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UnsignedEvent;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UnsignedEvent;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_UnsignedEventPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UnwrappedGift;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UnwrappedGift;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_UnwrappedGiftPtr;
}

class NostrSdkApiImpl extends NostrSdkApiImplPlatform implements NostrSdkApi {
  NostrSdkApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Client crateApiClientBuilderClientBuilderBuild(
      {required ClientBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientBuilderClientBuilderBuildConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientBuilderClientBuilderBuildConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_build",
        argNames: ["that"],
      );

  @override
  ClientBuilder crateApiClientBuilderClientBuilderDatabase(
      {required ClientBuilder that, required NostrDatabase database}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase(
            database, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientBuilderClientBuilderDatabaseConstMeta,
      argValues: [that, database],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientBuilderClientBuilderDatabaseConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_database",
        argNames: ["that", "database"],
      );

  @override
  ClientBuilder crateApiClientBuilderClientBuilderNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientBuilderClientBuilderNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientBuilderClientBuilderNewConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_new",
        argNames: [],
      );

  @override
  ClientBuilder crateApiClientBuilderClientBuilderOpts(
      {required ClientBuilder that, required ClientOptions opts}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
            opts, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientBuilderClientBuilderOptsConstMeta,
      argValues: [that, opts],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientBuilderClientBuilderOptsConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_opts",
        argNames: ["that", "opts"],
      );

  @override
  ClientBuilder crateApiClientBuilderClientBuilderSigner(
      {required ClientBuilder that, required NostrSigner signer}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            signer, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientBuilderClientBuilderSignerConstMeta,
      argValues: [that, signer],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientBuilderClientBuilderSignerConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_signer",
        argNames: ["that", "signer"],
      );

  @override
  ClientOptions crateApiClientOptionsClientOptionsAutoconnect(
      {required ClientOptions that, required bool val}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
            that, serializer);
        sse_encode_bool(val, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientOptionsClientOptionsAutoconnectConstMeta,
      argValues: [that, val],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsClientOptionsAutoconnectConstMeta =>
      const TaskConstMeta(
        debugName: "ClientOptions_autoconnect",
        argNames: ["that", "val"],
      );

  @override
  ClientOptions crateApiClientOptionsClientOptionsAutomaticAuthentication(
      {required ClientOptions that, required bool enabled}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
            that, serializer);
        sse_encode_bool(enabled, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiClientOptionsClientOptionsAutomaticAuthenticationConstMeta,
      argValues: [that, enabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiClientOptionsClientOptionsAutomaticAuthenticationConstMeta =>
          const TaskConstMeta(
            debugName: "ClientOptions_automatic_authentication",
            argNames: ["that", "enabled"],
          );

  @override
  ClientOptions crateApiClientOptionsClientOptionsConnection(
      {required ClientOptions that, required Connection connection}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
            connection, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientOptionsClientOptionsConnectionConstMeta,
      argValues: [that, connection],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsClientOptionsConnectionConstMeta =>
      const TaskConstMeta(
        debugName: "ClientOptions_connection",
        argNames: ["that", "connection"],
      );

  @override
  ClientOptions crateApiClientOptionsClientOptionsGossip(
      {required ClientOptions that, required bool enabled}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
            that, serializer);
        sse_encode_bool(enabled, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientOptionsClientOptionsGossipConstMeta,
      argValues: [that, enabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsClientOptionsGossipConstMeta =>
      const TaskConstMeta(
        debugName: "ClientOptions_gossip",
        argNames: ["that", "enabled"],
      );

  @override
  ClientOptions crateApiClientOptionsClientOptionsMinPow(
      {required ClientOptions that, required int difficulty}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
            that, serializer);
        sse_encode_u_8(difficulty, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientOptionsClientOptionsMinPowConstMeta,
      argValues: [that, difficulty],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsClientOptionsMinPowConstMeta =>
      const TaskConstMeta(
        debugName: "ClientOptions_min_pow",
        argNames: ["that", "difficulty"],
      );

  @override
  ClientOptions crateApiClientOptionsClientOptionsNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientOptionsClientOptionsNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsClientOptionsNewConstMeta =>
      const TaskConstMeta(
        debugName: "ClientOptions_new",
        argNames: [],
      );

  @override
  Future<bool> crateApiClientClientAddDiscoveryRelay(
      {required Client that, required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientAddDiscoveryRelayConstMeta,
      argValues: [that, url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientAddDiscoveryRelayConstMeta =>
      const TaskConstMeta(
        debugName: "Client_add_discovery_relay",
        argNames: ["that", "url"],
      );

  @override
  Future<bool> crateApiClientClientAddReadRelay(
      {required Client that, required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientAddReadRelayConstMeta,
      argValues: [that, url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientAddReadRelayConstMeta =>
      const TaskConstMeta(
        debugName: "Client_add_read_relay",
        argNames: ["that", "url"],
      );

  @override
  Future<bool> crateApiClientClientAddRelay(
      {required Client that, required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientAddRelayConstMeta,
      argValues: [that, url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientAddRelayConstMeta =>
      const TaskConstMeta(
        debugName: "Client_add_relay",
        argNames: ["that", "url"],
      );

  @override
  Future<bool> crateApiClientClientAddWriteRelay(
      {required Client that, required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientAddWriteRelayConstMeta,
      argValues: [that, url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientAddWriteRelayConstMeta =>
      const TaskConstMeta(
        debugName: "Client_add_write_relay",
        argNames: ["that", "url"],
      );

  @override
  void crateApiClientClientAutomaticAuthentication(
      {required Client that, required bool enable}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_bool(enable, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientAutomaticAuthenticationConstMeta,
      argValues: [that, enable],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientAutomaticAuthenticationConstMeta =>
      const TaskConstMeta(
        debugName: "Client_automatic_authentication",
        argNames: ["that", "enable"],
      );

  @override
  ClientBuilder crateApiClientClientBuilder() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientBuilderConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientBuilderConstMeta =>
      const TaskConstMeta(
        debugName: "Client_builder",
        argNames: [],
      );

  @override
  Future<void> crateApiClientClientConnect({required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientConnectConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientConnectConstMeta =>
      const TaskConstMeta(
        debugName: "Client_connect",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiClientClientConnectRelay(
      {required Client that, required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientConnectRelayConstMeta,
      argValues: [that, url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientConnectRelayConstMeta =>
      const TaskConstMeta(
        debugName: "Client_connect_relay",
        argNames: ["that", "url"],
      );

  @override
  Future<NostrDatabase> crateApiClientClientDatabase({required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientDatabaseConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientDatabaseConstMeta =>
      const TaskConstMeta(
        debugName: "Client_database",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiClientClientDisconnect({required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientDisconnectConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientDisconnectConstMeta =>
      const TaskConstMeta(
        debugName: "Client_disconnect",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiClientClientDisconnectRelay(
      {required Client that, required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientDisconnectRelayConstMeta,
      argValues: [that, url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientDisconnectRelayConstMeta =>
      const TaskConstMeta(
        debugName: "Client_disconnect_relay",
        argNames: ["that", "url"],
      );

  @override
  Future<Events> crateApiClientClientFetchEvents(
      {required Client that,
      required Filter filter,
      required Duration timeout}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            filter, serializer);
        sse_encode_Chrono_Duration(timeout, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientFetchEventsConstMeta,
      argValues: [that, filter, timeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientFetchEventsConstMeta =>
      const TaskConstMeta(
        debugName: "Client_fetch_events",
        argNames: ["that", "filter", "timeout"],
      );

  @override
  Future<Events> crateApiClientClientFetchEventsFrom(
      {required Client that,
      required List<String> urls,
      required Filter filter,
      required Duration timeout}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_list_String(urls, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            filter, serializer);
        sse_encode_Chrono_Duration(timeout, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientFetchEventsFromConstMeta,
      argValues: [that, urls, filter, timeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientFetchEventsFromConstMeta =>
      const TaskConstMeta(
        debugName: "Client_fetch_events_from",
        argNames: ["that", "urls", "filter", "timeout"],
      );

  @override
  Future<void> crateApiClientClientForceRemoveAllRelays(
      {required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientForceRemoveAllRelaysConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientForceRemoveAllRelaysConstMeta =>
      const TaskConstMeta(
        debugName: "Client_force_remove_all_relays",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiClientClientForceRemoveRelay(
      {required Client that, required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientForceRemoveRelayConstMeta,
      argValues: [that, url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientForceRemoveRelayConstMeta =>
      const TaskConstMeta(
        debugName: "Client_force_remove_relay",
        argNames: ["that", "url"],
      );

  @override
  Stream<RelayPoolNotification> crateApiClientClientHandleNotifications(
      {required Client that}) {
    final stream = RustStreamSink<RelayPoolNotification>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_StreamSink_relay_pool_notification_Sse(stream, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientHandleNotificationsConstMeta,
      argValues: [that, stream],
      apiImpl: this,
    )));
    return stream.stream;
  }

  TaskConstMeta get kCrateApiClientClientHandleNotificationsConstMeta =>
      const TaskConstMeta(
        debugName: "Client_handle_notifications",
        argNames: ["that", "stream"],
      );

  @override
  Future<bool> crateApiClientClientHasSigner({required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientHasSignerConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientHasSignerConstMeta =>
      const TaskConstMeta(
        debugName: "Client_has_signer",
        argNames: ["that"],
      );

  @override
  Client crateApiClientClientNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientNewConstMeta => const TaskConstMeta(
        debugName: "Client_new",
        argNames: [],
      );

  @override
  Future<void> crateApiClientClientRemoveAllRelays({required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientRemoveAllRelaysConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientRemoveAllRelaysConstMeta =>
      const TaskConstMeta(
        debugName: "Client_remove_all_relays",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiClientClientRemoveRelay(
      {required Client that, required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientRemoveRelayConstMeta,
      argValues: [that, url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientRemoveRelayConstMeta =>
      const TaskConstMeta(
        debugName: "Client_remove_relay",
        argNames: ["that", "url"],
      );

  @override
  Future<void> crateApiClientClientReset({required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientResetConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientResetConstMeta => const TaskConstMeta(
        debugName: "Client_reset",
        argNames: ["that"],
      );

  @override
  Future<SendEventOutput> crateApiClientClientSendEvent(
      {required Client that, required Event event}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            event, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_send_event_output,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientSendEventConstMeta,
      argValues: [that, event],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientSendEventConstMeta =>
      const TaskConstMeta(
        debugName: "Client_send_event",
        argNames: ["that", "event"],
      );

  @override
  Future<SendEventOutput> crateApiClientClientSendEventBuilder(
      {required Client that, required EventBuilder builder}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
            builder, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_send_event_output,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientSendEventBuilderConstMeta,
      argValues: [that, builder],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientSendEventBuilderConstMeta =>
      const TaskConstMeta(
        debugName: "Client_send_event_builder",
        argNames: ["that", "builder"],
      );

  @override
  Future<SendEventOutput> crateApiClientClientSendEventTo(
      {required Client that,
      required List<String> urls,
      required Event event}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_list_String(urls, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            event, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_send_event_output,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientSendEventToConstMeta,
      argValues: [that, urls, event],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientSendEventToConstMeta =>
      const TaskConstMeta(
        debugName: "Client_send_event_to",
        argNames: ["that", "urls", "event"],
      );

  @override
  Future<void> crateApiClientClientSetSigner(
      {required Client that, required NostrSigner signer}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            signer, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientSetSignerConstMeta,
      argValues: [that, signer],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientSetSignerConstMeta =>
      const TaskConstMeta(
        debugName: "Client_set_signer",
        argNames: ["that", "signer"],
      );

  @override
  Future<void> crateApiClientClientShutdown({required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientShutdownConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientShutdownConstMeta =>
      const TaskConstMeta(
        debugName: "Client_shutdown",
        argNames: ["that"],
      );

  @override
  Future<NostrSigner> crateApiClientClientSigner({required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientSignerConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientSignerConstMeta => const TaskConstMeta(
        debugName: "Client_signer",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiClientClientSubscribe(
      {required Client that,
      required Filter filter,
      SubscribeAutoCloseOptions? opts}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            filter, serializer);
        sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
            opts, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 39, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientSubscribeConstMeta,
      argValues: [that, filter, opts],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientSubscribeConstMeta =>
      const TaskConstMeta(
        debugName: "Client_subscribe",
        argNames: ["that", "filter", "opts"],
      );

  @override
  Future<String> crateApiClientClientSubscribeTo(
      {required Client that,
      required List<String> urls,
      required Filter filter,
      SubscribeAutoCloseOptions? opts}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_list_String(urls, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            filter, serializer);
        sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
            opts, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 40, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientSubscribeToConstMeta,
      argValues: [that, urls, filter, opts],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientSubscribeToConstMeta =>
      const TaskConstMeta(
        debugName: "Client_subscribe_to",
        argNames: ["that", "urls", "filter", "opts"],
      );

  @override
  Future<void> crateApiClientClientSubscribeWithId(
      {required Client that,
      required String id,
      required Filter filter,
      SubscribeAutoCloseOptions? opts}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_String(id, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            filter, serializer);
        sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
            opts, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 41, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientSubscribeWithIdConstMeta,
      argValues: [that, id, filter, opts],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientSubscribeWithIdConstMeta =>
      const TaskConstMeta(
        debugName: "Client_subscribe_with_id",
        argNames: ["that", "id", "filter", "opts"],
      );

  @override
  Future<void> crateApiClientClientSubscribeWithIdTo(
      {required Client that,
      required List<String> urls,
      required String id,
      required Filter filter,
      SubscribeAutoCloseOptions? opts}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_list_String(urls, serializer);
        sse_encode_String(id, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            filter, serializer);
        sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
            opts, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 42, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientSubscribeWithIdToConstMeta,
      argValues: [that, urls, id, filter, opts],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientSubscribeWithIdToConstMeta =>
      const TaskConstMeta(
        debugName: "Client_subscribe_with_id_to",
        argNames: ["that", "urls", "id", "filter", "opts"],
      );

  @override
  Future<void> crateApiClientClientUnsetSigner({required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 43, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientUnsetSignerConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientUnsetSignerConstMeta =>
      const TaskConstMeta(
        debugName: "Client_unset_signer",
        argNames: ["that"],
      );

  @override
  Connection crateApiClientOptionsConnectionAddr(
      {required Connection that, required String addr}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
            that, serializer);
        sse_encode_String(addr, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientOptionsConnectionAddrConstMeta,
      argValues: [that, addr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsConnectionAddrConstMeta =>
      const TaskConstMeta(
        debugName: "Connection_addr",
        argNames: ["that", "addr"],
      );

  @override
  Connection crateApiClientOptionsConnectionEmbeddedTor(
      {required Connection that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientOptionsConnectionEmbeddedTorConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsConnectionEmbeddedTorConstMeta =>
      const TaskConstMeta(
        debugName: "Connection_embedded_tor",
        argNames: ["that"],
      );

  @override
  Connection crateApiClientOptionsConnectionEmbeddedTorWithPath(
      {required Connection that, required String dataPath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
            that, serializer);
        sse_encode_String(dataPath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 46)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientOptionsConnectionEmbeddedTorWithPathConstMeta,
      argValues: [that, dataPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiClientOptionsConnectionEmbeddedTorWithPathConstMeta =>
          const TaskConstMeta(
            debugName: "Connection_embedded_tor_with_path",
            argNames: ["that", "dataPath"],
          );

  @override
  Connection crateApiClientOptionsConnectionMode(
      {required Connection that, required ConnectionMode mode}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
            that, serializer);
        sse_encode_box_autoadd_connection_mode(mode, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 47)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientOptionsConnectionModeConstMeta,
      argValues: [that, mode],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsConnectionModeConstMeta =>
      const TaskConstMeta(
        debugName: "Connection_mode",
        argNames: ["that", "mode"],
      );

  @override
  Connection crateApiClientOptionsConnectionNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientOptionsConnectionNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsConnectionNewConstMeta =>
      const TaskConstMeta(
        debugName: "Connection_new",
        argNames: [],
      );

  @override
  Connection crateApiClientOptionsConnectionTarget(
      {required Connection that, required ConnectionTarget target}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
            that, serializer);
        sse_encode_connection_target(target, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientOptionsConnectionTargetConstMeta,
      argValues: [that, target],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsConnectionTargetConstMeta =>
      const TaskConstMeta(
        debugName: "Connection_target",
        argNames: ["that", "target"],
      );

  @override
  UnsignedEvent crateApiProtocolEventBuilderEventBuilderBuild(
      {required EventBuilder that, required PublicKey publicKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            publicKey, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderBuildConstMeta,
      argValues: [that, publicKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventBuilderEventBuilderBuildConstMeta =>
      const TaskConstMeta(
        debugName: "EventBuilder_build",
        argNames: ["that", "publicKey"],
      );

  @override
  EventBuilder crateApiProtocolEventBuilderEventBuilderCustomCreatedAt(
      {required EventBuilder that, required BigInt createdAt}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
            that, serializer);
        sse_encode_u_64(createdAt, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 51)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiProtocolEventBuilderEventBuilderCustomCreatedAtConstMeta,
      argValues: [that, createdAt],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventBuilderEventBuilderCustomCreatedAtConstMeta =>
          const TaskConstMeta(
            debugName: "EventBuilder_custom_created_at",
            argNames: ["that", "createdAt"],
          );

  @override
  Future<Event> crateApiProtocolEventBuilderEventBuilderGiftWrap(
      {required NostrSigner signer,
      required PublicKey receiver,
      required UnsignedEvent rumor,
      required List<Tag> extraTags}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            signer, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            receiver, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            rumor, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            extraTags, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 52, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderGiftWrapConstMeta,
      argValues: [signer, receiver, rumor, extraTags],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventBuilderEventBuilderGiftWrapConstMeta =>
          const TaskConstMeta(
            debugName: "EventBuilder_gift_wrap",
            argNames: ["signer", "receiver", "rumor", "extraTags"],
          );

  @override
  Event crateApiProtocolEventBuilderEventBuilderGiftWrapFromSeal(
      {required PublicKey receiver,
      required Event seal,
      required List<Tag> extraTags}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            receiver, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            seal, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            extraTags, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 53)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiProtocolEventBuilderEventBuilderGiftWrapFromSealConstMeta,
      argValues: [receiver, seal, extraTags],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventBuilderEventBuilderGiftWrapFromSealConstMeta =>
          const TaskConstMeta(
            debugName: "EventBuilder_gift_wrap_from_seal",
            argNames: ["receiver", "seal", "extraTags"],
          );

  @override
  EventBuilder crateApiProtocolEventBuilderEventBuilderNew(
      {required int kind, required String content}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(kind, serializer);
        sse_encode_String(content, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 54)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderNewConstMeta,
      argValues: [kind, content],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventBuilderEventBuilderNewConstMeta =>
      const TaskConstMeta(
        debugName: "EventBuilder_new",
        argNames: ["kind", "content"],
      );

  @override
  EventBuilder crateApiProtocolEventBuilderEventBuilderPow(
      {required EventBuilder that, required int difficulty}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
            that, serializer);
        sse_encode_u_8(difficulty, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 55)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderPowConstMeta,
      argValues: [that, difficulty],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventBuilderEventBuilderPowConstMeta =>
      const TaskConstMeta(
        debugName: "EventBuilder_pow",
        argNames: ["that", "difficulty"],
      );

  @override
  Future<Event> crateApiProtocolEventBuilderEventBuilderPrivateMsg(
      {required NostrSigner signer,
      required PublicKey receiver,
      required String message,
      required List<Tag> rumorExtraTags}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            signer, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            receiver, serializer);
        sse_encode_String(message, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            rumorExtraTags, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 56, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderPrivateMsgConstMeta,
      argValues: [signer, receiver, message, rumorExtraTags],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventBuilderEventBuilderPrivateMsgConstMeta =>
          const TaskConstMeta(
            debugName: "EventBuilder_private_msg",
            argNames: ["signer", "receiver", "message", "rumorExtraTags"],
          );

  @override
  Future<EventBuilder> crateApiProtocolEventBuilderEventBuilderSeal(
      {required NostrSigner signer,
      required PublicKey receiver,
      required UnsignedEvent rumor}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            signer, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            receiver, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            rumor, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 57, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderSealConstMeta,
      argValues: [signer, receiver, rumor],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventBuilderEventBuilderSealConstMeta =>
      const TaskConstMeta(
        debugName: "EventBuilder_seal",
        argNames: ["signer", "receiver", "rumor"],
      );

  @override
  Future<Event> crateApiProtocolEventBuilderEventBuilderSign(
      {required EventBuilder that, required NostrSigner signer}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            signer, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 58, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderSignConstMeta,
      argValues: [that, signer],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventBuilderEventBuilderSignConstMeta =>
      const TaskConstMeta(
        debugName: "EventBuilder_sign",
        argNames: ["that", "signer"],
      );

  @override
  Event crateApiProtocolEventBuilderEventBuilderSignWithKeys(
      {required EventBuilder that, required Keys keys}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
            keys, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 59)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderSignWithKeysConstMeta,
      argValues: [that, keys],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventBuilderEventBuilderSignWithKeysConstMeta =>
          const TaskConstMeta(
            debugName: "EventBuilder_sign_with_keys",
            argNames: ["that", "keys"],
          );

  @override
  EventBuilder crateApiProtocolEventBuilderEventBuilderTag(
      {required EventBuilder that, required Tag tag}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            tag, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 60)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderTagConstMeta,
      argValues: [that, tag],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventBuilderEventBuilderTagConstMeta =>
      const TaskConstMeta(
        debugName: "EventBuilder_tag",
        argNames: ["that", "tag"],
      );

  @override
  EventBuilder crateApiProtocolEventBuilderEventBuilderTags(
      {required EventBuilder that, required List<Tag> tags}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
            that, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            tags, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 61)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderTagsConstMeta,
      argValues: [that, tags],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventBuilderEventBuilderTagsConstMeta =>
      const TaskConstMeta(
        debugName: "EventBuilder_tags",
        argNames: ["that", "tags"],
      );

  @override
  EventBuilder crateApiProtocolEventBuilderEventBuilderTextNote(
      {required String content}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(content, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 62)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderTextNoteConstMeta,
      argValues: [content],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventBuilderEventBuilderTextNoteConstMeta =>
          const TaskConstMeta(
            debugName: "EventBuilder_text_note",
            argNames: ["content"],
          );

  @override
  EventId crateApiProtocolEventIdEventIdFromSlice({required List<int> bytes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 63)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventIdEventIdFromSliceConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventIdEventIdFromSliceConstMeta =>
      const TaskConstMeta(
        debugName: "EventId_from_slice",
        argNames: ["bytes"],
      );

  @override
  EventId crateApiProtocolEventIdEventIdNew(
      {required PublicKey publicKey,
      required BigInt createdAt,
      required int kind,
      required List<Tag> tags,
      required String content}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            publicKey, serializer);
        sse_encode_u_64(createdAt, serializer);
        sse_encode_u_16(kind, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            tags, serializer);
        sse_encode_String(content, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 64)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventIdEventIdNewConstMeta,
      argValues: [publicKey, createdAt, kind, tags, content],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventIdEventIdNewConstMeta =>
      const TaskConstMeta(
        debugName: "EventId_new",
        argNames: ["publicKey", "createdAt", "kind", "tags", "content"],
      );

  @override
  EventId crateApiProtocolEventIdEventIdParse({required String id}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 65)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventIdEventIdParseConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventIdEventIdParseConstMeta =>
      const TaskConstMeta(
        debugName: "EventId_parse",
        argNames: ["id"],
      );

  @override
  String crateApiProtocolEventIdEventIdToBech32({required EventId that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 66)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventIdEventIdToBech32ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventIdEventIdToBech32ConstMeta =>
      const TaskConstMeta(
        debugName: "EventId_to_bech32",
        argNames: ["that"],
      );

  @override
  Uint8List crateApiProtocolEventIdEventIdToBytes({required EventId that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 67)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventIdEventIdToBytesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventIdEventIdToBytesConstMeta =>
      const TaskConstMeta(
        debugName: "EventId_to_bytes",
        argNames: ["that"],
      );

  @override
  String crateApiProtocolEventIdEventIdToHex({required EventId that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 68)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventIdEventIdToHexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventIdEventIdToHexConstMeta =>
      const TaskConstMeta(
        debugName: "EventId_to_hex",
        argNames: ["that"],
      );

  @override
  String crateApiProtocolEventIdEventIdToNostrUri({required EventId that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 69)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventIdEventIdToNostrUriConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventIdEventIdToNostrUriConstMeta =>
      const TaskConstMeta(
        debugName: "EventId_to_nostr_uri",
        argNames: ["that"],
      );

  @override
  String crateApiProtocolEventEventAsJson({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 70)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventEventAsJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventAsJsonConstMeta =>
      const TaskConstMeta(
        debugName: "Event_as_json",
        argNames: ["that"],
      );

  @override
  String crateApiProtocolEventEventAsPrettyJson({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 71)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventEventAsPrettyJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventAsPrettyJsonConstMeta =>
      const TaskConstMeta(
        debugName: "Event_as_pretty_json",
        argNames: ["that"],
      );

  @override
  PublicKey crateApiProtocolEventEventAuthor({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 72)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventAuthorConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventAuthorConstMeta =>
      const TaskConstMeta(
        debugName: "Event_author",
        argNames: ["that"],
      );

  @override
  String crateApiProtocolEventEventContent({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 73)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventContentConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventContentConstMeta =>
      const TaskConstMeta(
        debugName: "Event_content",
        argNames: ["that"],
      );

  @override
  BigInt crateApiProtocolEventEventCreatedAt({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 74)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventCreatedAtConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventCreatedAtConstMeta =>
      const TaskConstMeta(
        debugName: "Event_created_at",
        argNames: ["that"],
      );

  @override
  Event crateApiProtocolEventEventFromJson({required String json}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(json, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 75)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventEventFromJsonConstMeta,
      argValues: [json],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventFromJsonConstMeta =>
      const TaskConstMeta(
        debugName: "Event_from_json",
        argNames: ["json"],
      );

  @override
  EventId crateApiProtocolEventEventId({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 76)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventIdConstMeta =>
      const TaskConstMeta(
        debugName: "Event_id",
        argNames: ["that"],
      );

  @override
  bool crateApiProtocolEventEventIsExpired({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 77)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventIsExpiredConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventIsExpiredConstMeta =>
      const TaskConstMeta(
        debugName: "Event_is_expired",
        argNames: ["that"],
      );

  @override
  bool crateApiProtocolEventEventIsProtected({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 78)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventIsProtectedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventIsProtectedConstMeta =>
      const TaskConstMeta(
        debugName: "Event_is_protected",
        argNames: ["that"],
      );

  @override
  int crateApiProtocolEventEventKind({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 79)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventKindConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventKindConstMeta =>
      const TaskConstMeta(
        debugName: "Event_kind",
        argNames: ["that"],
      );

  @override
  String crateApiProtocolEventEventSignature({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 80)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventSignatureConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventSignatureConstMeta =>
      const TaskConstMeta(
        debugName: "Event_signature",
        argNames: ["that"],
      );

  @override
  List<Tag> crateApiProtocolEventEventTags({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 81)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventTagsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventTagsConstMeta =>
      const TaskConstMeta(
        debugName: "Event_tags",
        argNames: ["that"],
      );

  @override
  void crateApiProtocolEventEventVerify({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 82)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventEventVerifyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventVerifyConstMeta =>
      const TaskConstMeta(
        debugName: "Event_verify",
        argNames: ["that"],
      );

  @override
  bool crateApiProtocolEventEventVerifyId({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 83)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventVerifyIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventVerifyIdConstMeta =>
      const TaskConstMeta(
        debugName: "Event_verify_id",
        argNames: ["that"],
      );

  @override
  bool crateApiProtocolEventEventVerifySignature({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 84)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventVerifySignatureConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventVerifySignatureConstMeta =>
      const TaskConstMeta(
        debugName: "Event_verify_signature",
        argNames: ["that"],
      );

  @override
  bool crateApiDatabaseEventsEventsContains(
      {required Events that, required Event event}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            event, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 85)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDatabaseEventsEventsContainsConstMeta,
      argValues: [that, event],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseEventsEventsContainsConstMeta =>
      const TaskConstMeta(
        debugName: "Events_contains",
        argNames: ["that", "event"],
      );

  @override
  Event? crateApiDatabaseEventsEventsFirst({required Events that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 86)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDatabaseEventsEventsFirstConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseEventsEventsFirstConstMeta =>
      const TaskConstMeta(
        debugName: "Events_first",
        argNames: ["that"],
      );

  @override
  bool crateApiDatabaseEventsEventsIsEmpty({required Events that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 87)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDatabaseEventsEventsIsEmptyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseEventsEventsIsEmptyConstMeta =>
      const TaskConstMeta(
        debugName: "Events_is_empty",
        argNames: ["that"],
      );

  @override
  BigInt crateApiDatabaseEventsEventsLen({required Events that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 88)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDatabaseEventsEventsLenConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseEventsEventsLenConstMeta =>
      const TaskConstMeta(
        debugName: "Events_len",
        argNames: ["that"],
      );

  @override
  Events crateApiDatabaseEventsEventsMerge(
      {required Events that, required Events other}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events(
            other, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 89)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDatabaseEventsEventsMergeConstMeta,
      argValues: [that, other],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseEventsEventsMergeConstMeta =>
      const TaskConstMeta(
        debugName: "Events_merge",
        argNames: ["that", "other"],
      );

  @override
  List<Event> crateApiDatabaseEventsEventsToVec({required Events that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 90)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDatabaseEventsEventsToVecConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseEventsEventsToVecConstMeta =>
      const TaskConstMeta(
        debugName: "Events_to_vec",
        argNames: ["that"],
      );

  @override
  String crateApiProtocolFilterFilterAsJson({required Filter that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 91)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolFilterFilterAsJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterAsJsonConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_as_json",
        argNames: ["that"],
      );

  @override
  Filter crateApiProtocolFilterFilterAuthor(
      {required Filter that, required PublicKey author}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            author, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 92)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterAuthorConstMeta,
      argValues: [that, author],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterAuthorConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_author",
        argNames: ["that", "author"],
      );

  @override
  Filter crateApiProtocolFilterFilterAuthors(
      {required Filter that, required List<PublicKey> authors}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            authors, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 93)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterAuthorsConstMeta,
      argValues: [that, authors],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterAuthorsConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_authors",
        argNames: ["that", "authors"],
      );

  @override
  Filter crateApiProtocolFilterFilterCustomTag(
      {required Filter that,
      required SingleLetterTag tag,
      required String content}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SingleLetterTag(
            tag, serializer);
        sse_encode_String(content, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 94)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterCustomTagConstMeta,
      argValues: [that, tag, content],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterCustomTagConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_custom_tag",
        argNames: ["that", "tag", "content"],
      );

  @override
  Filter crateApiProtocolFilterFilterCustomTags(
      {required Filter that,
      required SingleLetterTag tag,
      required List<String> content}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SingleLetterTag(
            tag, serializer);
        sse_encode_list_String(content, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 95)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterCustomTagsConstMeta,
      argValues: [that, tag, content],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterCustomTagsConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_custom_tags",
        argNames: ["that", "tag", "content"],
      );

  @override
  Filter crateApiProtocolFilterFilterEvent(
      {required Filter that, required EventId id}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
            id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 96)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterEventConstMeta,
      argValues: [that, id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterEventConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_event",
        argNames: ["that", "id"],
      );

  @override
  Filter crateApiProtocolFilterFilterEvents(
      {required Filter that, required List<EventId> ids}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
            ids, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 97)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterEventsConstMeta,
      argValues: [that, ids],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterEventsConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_events",
        argNames: ["that", "ids"],
      );

  @override
  Filter crateApiProtocolFilterFilterFromJson({required String json}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(json, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 98)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolFilterFilterFromJsonConstMeta,
      argValues: [json],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterFromJsonConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_from_json",
        argNames: ["json"],
      );

  @override
  Filter crateApiProtocolFilterFilterHashtag(
      {required Filter that, required String hashtag}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_String(hashtag, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 99)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterHashtagConstMeta,
      argValues: [that, hashtag],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterHashtagConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_hashtag",
        argNames: ["that", "hashtag"],
      );

  @override
  Filter crateApiProtocolFilterFilterHashtags(
      {required Filter that, required List<String> hashtags}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_list_String(hashtags, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 100)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterHashtagsConstMeta,
      argValues: [that, hashtags],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterHashtagsConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_hashtags",
        argNames: ["that", "hashtags"],
      );

  @override
  Filter crateApiProtocolFilterFilterId(
      {required Filter that, required EventId id}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
            id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 101)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterIdConstMeta,
      argValues: [that, id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterIdConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_id",
        argNames: ["that", "id"],
      );

  @override
  Filter crateApiProtocolFilterFilterIdentifier(
      {required Filter that, required String identifier}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_String(identifier, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 102)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterIdentifierConstMeta,
      argValues: [that, identifier],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterIdentifierConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_identifier",
        argNames: ["that", "identifier"],
      );

  @override
  Filter crateApiProtocolFilterFilterIdentifiers(
      {required Filter that, required List<String> identifiers}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_list_String(identifiers, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 103)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterIdentifiersConstMeta,
      argValues: [that, identifiers],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterIdentifiersConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_identifiers",
        argNames: ["that", "identifiers"],
      );

  @override
  Filter crateApiProtocolFilterFilterIds(
      {required Filter that, required List<EventId> ids}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
            ids, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 104)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterIdsConstMeta,
      argValues: [that, ids],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterIdsConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_ids",
        argNames: ["that", "ids"],
      );

  @override
  bool crateApiProtocolFilterFilterIsEmpty({required Filter that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 105)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterIsEmptyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterIsEmptyConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_is_empty",
        argNames: ["that"],
      );

  @override
  Filter crateApiProtocolFilterFilterKind(
      {required Filter that, required int kind}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_u_16(kind, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 106)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterKindConstMeta,
      argValues: [that, kind],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterKindConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_kind",
        argNames: ["that", "kind"],
      );

  @override
  Filter crateApiProtocolFilterFilterKinds(
      {required Filter that, required List<int> kinds}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_list_prim_u_16_loose(kinds, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 107)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterKindsConstMeta,
      argValues: [that, kinds],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterKindsConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_kinds",
        argNames: ["that", "kinds"],
      );

  @override
  Filter crateApiProtocolFilterFilterLimit(
      {required Filter that, required BigInt limit}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_u_64(limit, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 108)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterLimitConstMeta,
      argValues: [that, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterLimitConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_limit",
        argNames: ["that", "limit"],
      );

  @override
  bool crateApiProtocolFilterFilterMatchEvent(
      {required Filter that, required Event event}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            event, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 109)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterMatchEventConstMeta,
      argValues: [that, event],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterMatchEventConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_match_event",
        argNames: ["that", "event"],
      );

  @override
  Filter crateApiProtocolFilterFilterNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 110)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterNewConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_new",
        argNames: [],
      );

  @override
  Filter crateApiProtocolFilterFilterPubkey(
      {required Filter that, required PublicKey pubkey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            pubkey, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 111)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterPubkeyConstMeta,
      argValues: [that, pubkey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterPubkeyConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_pubkey",
        argNames: ["that", "pubkey"],
      );

  @override
  Filter crateApiProtocolFilterFilterPubkeys(
      {required Filter that, required List<PublicKey> pubkeys}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            pubkeys, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 112)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterPubkeysConstMeta,
      argValues: [that, pubkeys],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterPubkeysConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_pubkeys",
        argNames: ["that", "pubkeys"],
      );

  @override
  Filter crateApiProtocolFilterFilterReference(
      {required Filter that, required String reference}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_String(reference, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 113)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterReferenceConstMeta,
      argValues: [that, reference],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterReferenceConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_reference",
        argNames: ["that", "reference"],
      );

  @override
  Filter crateApiProtocolFilterFilterReferences(
      {required Filter that, required List<String> references}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_list_String(references, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 114)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterReferencesConstMeta,
      argValues: [that, references],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterReferencesConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_references",
        argNames: ["that", "references"],
      );

  @override
  Filter crateApiProtocolFilterFilterRemoveAuthors(
      {required Filter that, required List<PublicKey> authors}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            authors, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 115)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterRemoveAuthorsConstMeta,
      argValues: [that, authors],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterRemoveAuthorsConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_remove_authors",
        argNames: ["that", "authors"],
      );

  @override
  Filter crateApiProtocolFilterFilterRemoveCustomTags(
      {required Filter that,
      required SingleLetterTag tag,
      required List<String> content}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SingleLetterTag(
            tag, serializer);
        sse_encode_list_String(content, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 116)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterRemoveCustomTagsConstMeta,
      argValues: [that, tag, content],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterRemoveCustomTagsConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_remove_custom_tags",
        argNames: ["that", "tag", "content"],
      );

  @override
  Filter crateApiProtocolFilterFilterRemoveEvents(
      {required Filter that, required List<EventId> ids}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
            ids, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 117)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterRemoveEventsConstMeta,
      argValues: [that, ids],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterRemoveEventsConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_remove_events",
        argNames: ["that", "ids"],
      );

  @override
  Filter crateApiProtocolFilterFilterRemoveHashtags(
      {required Filter that, required List<String> hashtags}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_list_String(hashtags, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 118)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterRemoveHashtagsConstMeta,
      argValues: [that, hashtags],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterRemoveHashtagsConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_remove_hashtags",
        argNames: ["that", "hashtags"],
      );

  @override
  Filter crateApiProtocolFilterFilterRemoveIdentifiers(
      {required Filter that, required List<String> identifiers}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_list_String(identifiers, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 119)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterRemoveIdentifiersConstMeta,
      argValues: [that, identifiers],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterRemoveIdentifiersConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_remove_identifiers",
        argNames: ["that", "identifiers"],
      );

  @override
  Filter crateApiProtocolFilterFilterRemoveIds(
      {required Filter that, required List<EventId> ids}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
            ids, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 120)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterRemoveIdsConstMeta,
      argValues: [that, ids],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterRemoveIdsConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_remove_ids",
        argNames: ["that", "ids"],
      );

  @override
  Filter crateApiProtocolFilterFilterRemoveKinds(
      {required Filter that, required List<int> kinds}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_list_prim_u_16_loose(kinds, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 121)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterRemoveKindsConstMeta,
      argValues: [that, kinds],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterRemoveKindsConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_remove_kinds",
        argNames: ["that", "kinds"],
      );

  @override
  Filter crateApiProtocolFilterFilterRemoveLimit({required Filter that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 122)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterRemoveLimitConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterRemoveLimitConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_remove_limit",
        argNames: ["that"],
      );

  @override
  Filter crateApiProtocolFilterFilterRemovePubkeys(
      {required Filter that, required List<PublicKey> pubkeys}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            pubkeys, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 123)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterRemovePubkeysConstMeta,
      argValues: [that, pubkeys],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterRemovePubkeysConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_remove_pubkeys",
        argNames: ["that", "pubkeys"],
      );

  @override
  Filter crateApiProtocolFilterFilterRemoveReferences(
      {required Filter that, required List<String> references}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_list_String(references, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 124)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterRemoveReferencesConstMeta,
      argValues: [that, references],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterRemoveReferencesConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_remove_references",
        argNames: ["that", "references"],
      );

  @override
  Filter crateApiProtocolFilterFilterRemoveSearch({required Filter that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 125)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterRemoveSearchConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterRemoveSearchConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_remove_search",
        argNames: ["that"],
      );

  @override
  Filter crateApiProtocolFilterFilterRemoveSince({required Filter that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 126)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterRemoveSinceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterRemoveSinceConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_remove_since",
        argNames: ["that"],
      );

  @override
  Filter crateApiProtocolFilterFilterRemoveUntil({required Filter that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 127)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterRemoveUntilConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterRemoveUntilConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_remove_until",
        argNames: ["that"],
      );

  @override
  Filter crateApiProtocolFilterFilterSearch(
      {required Filter that, required String text}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_String(text, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 128)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterSearchConstMeta,
      argValues: [that, text],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterSearchConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_search",
        argNames: ["that", "text"],
      );

  @override
  Filter crateApiProtocolFilterFilterSince(
      {required Filter that, required BigInt timestamp}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_u_64(timestamp, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 129)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterSinceConstMeta,
      argValues: [that, timestamp],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterSinceConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_since",
        argNames: ["that", "timestamp"],
      );

  @override
  Filter crateApiProtocolFilterFilterUntil(
      {required Filter that, required BigInt timestamp}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            that, serializer);
        sse_encode_u_64(timestamp, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 130)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterFilterUntilConstMeta,
      argValues: [that, timestamp],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterFilterUntilConstMeta =>
      const TaskConstMeta(
        debugName: "Filter_until",
        argNames: ["that", "timestamp"],
      );

  @override
  Keys crateApiProtocolKeyKeysGenerate() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 131)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolKeyKeysGenerateConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyKeysGenerateConstMeta =>
      const TaskConstMeta(
        debugName: "Keys_generate",
        argNames: [],
      );

  @override
  Keys crateApiProtocolKeyKeysNew({required SecretKey secretKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
            secretKey, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 132)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolKeyKeysNewConstMeta,
      argValues: [secretKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyKeysNewConstMeta => const TaskConstMeta(
        debugName: "Keys_new",
        argNames: ["secretKey"],
      );

  @override
  Keys crateApiProtocolKeyKeysParse({required String secretKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(secretKey, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 133)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolKeyKeysParseConstMeta,
      argValues: [secretKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyKeysParseConstMeta =>
      const TaskConstMeta(
        debugName: "Keys_parse",
        argNames: ["secretKey"],
      );

  @override
  PublicKey crateApiProtocolKeyKeysPublicKey({required Keys that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 134)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolKeyKeysPublicKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyKeysPublicKeyConstMeta =>
      const TaskConstMeta(
        debugName: "Keys_public_key",
        argNames: ["that"],
      );

  @override
  SecretKey crateApiProtocolKeyKeysSecretKey({required Keys that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 135)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolKeyKeysSecretKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyKeysSecretKeyConstMeta =>
      const TaskConstMeta(
        debugName: "Keys_secret_key",
        argNames: ["that"],
      );

  @override
  Future<BigInt> crateApiDatabaseNostrDatabaseCount(
      {required NostrDatabase that, required Filter filter}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            filter, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 136, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDatabaseNostrDatabaseCountConstMeta,
      argValues: [that, filter],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseNostrDatabaseCountConstMeta =>
      const TaskConstMeta(
        debugName: "NostrDatabase_count",
        argNames: ["that", "filter"],
      );

  @override
  Future<void> crateApiDatabaseNostrDatabaseDelete(
      {required NostrDatabase that, required Filter filter}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            filter, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 137, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDatabaseNostrDatabaseDeleteConstMeta,
      argValues: [that, filter],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseNostrDatabaseDeleteConstMeta =>
      const TaskConstMeta(
        debugName: "NostrDatabase_delete",
        argNames: ["that", "filter"],
      );

  @override
  Future<Event?> crateApiDatabaseNostrDatabaseEventById(
      {required NostrDatabase that, required EventId eventId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
            eventId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 138, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDatabaseNostrDatabaseEventByIdConstMeta,
      argValues: [that, eventId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseNostrDatabaseEventByIdConstMeta =>
      const TaskConstMeta(
        debugName: "NostrDatabase_event_by_id",
        argNames: ["that", "eventId"],
      );

  @override
  NostrDatabase crateApiDatabaseNostrDatabaseLmdb({required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 139)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDatabaseNostrDatabaseLmdbConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseNostrDatabaseLmdbConstMeta =>
      const TaskConstMeta(
        debugName: "NostrDatabase_lmdb",
        argNames: ["path"],
      );

  @override
  Future<Events> crateApiDatabaseNostrDatabaseQuery(
      {required NostrDatabase that, required Filter filter}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
            filter, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 140, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDatabaseNostrDatabaseQueryConstMeta,
      argValues: [that, filter],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseNostrDatabaseQueryConstMeta =>
      const TaskConstMeta(
        debugName: "NostrDatabase_query",
        argNames: ["that", "filter"],
      );

  @override
  Future<SaveEventStatus> crateApiDatabaseNostrDatabaseSaveEvent(
      {required NostrDatabase that, required Event event}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            event, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 141, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_save_event_status,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDatabaseNostrDatabaseSaveEventConstMeta,
      argValues: [that, event],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseNostrDatabaseSaveEventConstMeta =>
      const TaskConstMeta(
        debugName: "NostrDatabase_save_event",
        argNames: ["that", "event"],
      );

  @override
  Future<void> crateApiDatabaseNostrDatabaseWipe(
      {required NostrDatabase that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 142, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDatabaseNostrDatabaseWipeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseNostrDatabaseWipeConstMeta =>
      const TaskConstMeta(
        debugName: "NostrDatabase_wipe",
        argNames: ["that"],
      );

  @override
  SignerBackend crateApiProtocolSignerNostrSignerBackend(
      {required NostrSigner that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 143)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_signer_backend,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolSignerNostrSignerBackendConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolSignerNostrSignerBackendConstMeta =>
      const TaskConstMeta(
        debugName: "NostrSigner_backend",
        argNames: ["that"],
      );

  @override
  Future<PublicKey> crateApiProtocolSignerNostrSignerGetPublicKey(
      {required NostrSigner that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 144, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolSignerNostrSignerGetPublicKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolSignerNostrSignerGetPublicKeyConstMeta =>
      const TaskConstMeta(
        debugName: "NostrSigner_get_public_key",
        argNames: ["that"],
      );

  @override
  NostrSigner crateApiProtocolSignerNostrSignerKeys({required Keys keys}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
            keys, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 145)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolSignerNostrSignerKeysConstMeta,
      argValues: [keys],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolSignerNostrSignerKeysConstMeta =>
      const TaskConstMeta(
        debugName: "NostrSigner_keys",
        argNames: ["keys"],
      );

  @override
  Future<String> crateApiProtocolSignerNostrSignerNip04Decrypt(
      {required NostrSigner that,
      required PublicKey publicKey,
      required String encryptedContent}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            publicKey, serializer);
        sse_encode_String(encryptedContent, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 146, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolSignerNostrSignerNip04DecryptConstMeta,
      argValues: [that, publicKey, encryptedContent],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolSignerNostrSignerNip04DecryptConstMeta =>
      const TaskConstMeta(
        debugName: "NostrSigner_nip04_decrypt",
        argNames: ["that", "publicKey", "encryptedContent"],
      );

  @override
  Future<String> crateApiProtocolSignerNostrSignerNip04Encrypt(
      {required NostrSigner that,
      required PublicKey publicKey,
      required String content}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            publicKey, serializer);
        sse_encode_String(content, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 147, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolSignerNostrSignerNip04EncryptConstMeta,
      argValues: [that, publicKey, content],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolSignerNostrSignerNip04EncryptConstMeta =>
      const TaskConstMeta(
        debugName: "NostrSigner_nip04_encrypt",
        argNames: ["that", "publicKey", "content"],
      );

  @override
  Future<String> crateApiProtocolSignerNostrSignerNip44Decrypt(
      {required NostrSigner that,
      required PublicKey publicKey,
      required String content}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            publicKey, serializer);
        sse_encode_String(content, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 148, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolSignerNostrSignerNip44DecryptConstMeta,
      argValues: [that, publicKey, content],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolSignerNostrSignerNip44DecryptConstMeta =>
      const TaskConstMeta(
        debugName: "NostrSigner_nip44_decrypt",
        argNames: ["that", "publicKey", "content"],
      );

  @override
  Future<String> crateApiProtocolSignerNostrSignerNip44Encrypt(
      {required NostrSigner that,
      required PublicKey publicKey,
      required String content}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            publicKey, serializer);
        sse_encode_String(content, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 149, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolSignerNostrSignerNip44EncryptConstMeta,
      argValues: [that, publicKey, content],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolSignerNostrSignerNip44EncryptConstMeta =>
      const TaskConstMeta(
        debugName: "NostrSigner_nip44_encrypt",
        argNames: ["that", "publicKey", "content"],
      );

  @override
  Future<Event> crateApiProtocolSignerNostrSignerSignEvent(
      {required NostrSigner that, required UnsignedEvent unsignedEvent}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            unsignedEvent, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 150, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolSignerNostrSignerSignEventConstMeta,
      argValues: [that, unsignedEvent],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolSignerNostrSignerSignEventConstMeta =>
      const TaskConstMeta(
        debugName: "NostrSigner_sign_event",
        argNames: ["that", "unsignedEvent"],
      );

  @override
  PublicKey crateApiProtocolKeyPublicKeyPublicKeyFromSlice(
      {required List<int> publicKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(publicKey, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 151)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolKeyPublicKeyPublicKeyFromSliceConstMeta,
      argValues: [publicKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyPublicKeyPublicKeyFromSliceConstMeta =>
      const TaskConstMeta(
        debugName: "PublicKey_from_slice",
        argNames: ["publicKey"],
      );

  @override
  PublicKey crateApiProtocolKeyPublicKeyPublicKeyParse(
      {required String publicKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(publicKey, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 152)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolKeyPublicKeyPublicKeyParseConstMeta,
      argValues: [publicKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyPublicKeyPublicKeyParseConstMeta =>
      const TaskConstMeta(
        debugName: "PublicKey_parse",
        argNames: ["publicKey"],
      );

  @override
  String crateApiProtocolKeyPublicKeyPublicKeyToBech32(
      {required PublicKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 153)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolKeyPublicKeyPublicKeyToBech32ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyPublicKeyPublicKeyToBech32ConstMeta =>
      const TaskConstMeta(
        debugName: "PublicKey_to_bech32",
        argNames: ["that"],
      );

  @override
  Uint8List crateApiProtocolKeyPublicKeyPublicKeyToBytes(
      {required PublicKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 154)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolKeyPublicKeyPublicKeyToBytesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyPublicKeyPublicKeyToBytesConstMeta =>
      const TaskConstMeta(
        debugName: "PublicKey_to_bytes",
        argNames: ["that"],
      );

  @override
  String crateApiProtocolKeyPublicKeyPublicKeyToHex({required PublicKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 155)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolKeyPublicKeyPublicKeyToHexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyPublicKeyPublicKeyToHexConstMeta =>
      const TaskConstMeta(
        debugName: "PublicKey_to_hex",
        argNames: ["that"],
      );

  @override
  String crateApiProtocolKeyPublicKeyPublicKeyToNostrUri(
      {required PublicKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 156)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolKeyPublicKeyPublicKeyToNostrUriConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyPublicKeyPublicKeyToNostrUriConstMeta =>
      const TaskConstMeta(
        debugName: "PublicKey_to_nostr_uri",
        argNames: ["that"],
      );

  @override
  SecretKey crateApiProtocolKeySecretKeySecretKeyFromSlice(
      {required List<int> secretKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(secretKey, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 157)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolKeySecretKeySecretKeyFromSliceConstMeta,
      argValues: [secretKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeySecretKeySecretKeyFromSliceConstMeta =>
      const TaskConstMeta(
        debugName: "SecretKey_from_slice",
        argNames: ["secretKey"],
      );

  @override
  SecretKey crateApiProtocolKeySecretKeySecretKeyGenerate() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 158)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolKeySecretKeySecretKeyGenerateConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeySecretKeySecretKeyGenerateConstMeta =>
      const TaskConstMeta(
        debugName: "SecretKey_generate",
        argNames: [],
      );

  @override
  SecretKey crateApiProtocolKeySecretKeySecretKeyParse(
      {required String secretKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(secretKey, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 159)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolKeySecretKeySecretKeyParseConstMeta,
      argValues: [secretKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeySecretKeySecretKeyParseConstMeta =>
      const TaskConstMeta(
        debugName: "SecretKey_parse",
        argNames: ["secretKey"],
      );

  @override
  String crateApiProtocolKeySecretKeySecretKeyToBech32(
      {required SecretKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 160)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolKeySecretKeySecretKeyToBech32ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeySecretKeySecretKeyToBech32ConstMeta =>
      const TaskConstMeta(
        debugName: "SecretKey_to_bech32",
        argNames: ["that"],
      );

  @override
  String crateApiProtocolKeySecretKeySecretKeyToSecretHex(
      {required SecretKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 161)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolKeySecretKeySecretKeyToSecretHexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolKeySecretKeySecretKeyToSecretHexConstMeta =>
          const TaskConstMeta(
            debugName: "SecretKey_to_secret_hex",
            argNames: ["that"],
          );

  @override
  bool crateApiProtocolFilterSingleLetterTagIsLowercase(
      {required SingleLetterTag that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SingleLetterTag(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 162)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterSingleLetterTagIsLowercaseConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolFilterSingleLetterTagIsLowercaseConstMeta =>
          const TaskConstMeta(
            debugName: "SingleLetterTag_is_lowercase",
            argNames: ["that"],
          );

  @override
  bool crateApiProtocolFilterSingleLetterTagIsUppercase(
      {required SingleLetterTag that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SingleLetterTag(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 163)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterSingleLetterTagIsUppercaseConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolFilterSingleLetterTagIsUppercaseConstMeta =>
          const TaskConstMeta(
            debugName: "SingleLetterTag_is_uppercase",
            argNames: ["that"],
          );

  @override
  SingleLetterTag crateApiProtocolFilterSingleLetterTagLowercase(
      {required Alphabet character}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_alphabet(character, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 164)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SingleLetterTag,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterSingleLetterTagLowercaseConstMeta,
      argValues: [character],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterSingleLetterTagLowercaseConstMeta =>
      const TaskConstMeta(
        debugName: "SingleLetterTag_lowercase",
        argNames: ["character"],
      );

  @override
  SingleLetterTag crateApiProtocolFilterSingleLetterTagUppercase(
      {required Alphabet character}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_alphabet(character, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 165)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SingleLetterTag,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolFilterSingleLetterTagUppercaseConstMeta,
      argValues: [character],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolFilterSingleLetterTagUppercaseConstMeta =>
      const TaskConstMeta(
        debugName: "SingleLetterTag_uppercase",
        argNames: ["character"],
      );

  @override
  SubscribeAutoCloseOptions
      crateApiRelayOptionsSubscribeAutoCloseOptionsExitPolicy(
          {required SubscribeAutoCloseOptions that,
          required ReqExitPolicy policy}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
            that, serializer);
        sse_encode_box_autoadd_req_exit_policy(policy, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 166)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiRelayOptionsSubscribeAutoCloseOptionsExitPolicyConstMeta,
      argValues: [that, policy],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRelayOptionsSubscribeAutoCloseOptionsExitPolicyConstMeta =>
          const TaskConstMeta(
            debugName: "SubscribeAutoCloseOptions_exit_policy",
            argNames: ["that", "policy"],
          );

  @override
  SubscribeAutoCloseOptions
      crateApiRelayOptionsSubscribeAutoCloseOptionsIdleTimeout(
          {required SubscribeAutoCloseOptions that, Duration? timeout}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
            that, serializer);
        sse_encode_opt_box_autoadd_Chrono_Duration(timeout, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 167)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiRelayOptionsSubscribeAutoCloseOptionsIdleTimeoutConstMeta,
      argValues: [that, timeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRelayOptionsSubscribeAutoCloseOptionsIdleTimeoutConstMeta =>
          const TaskConstMeta(
            debugName: "SubscribeAutoCloseOptions_idle_timeout",
            argNames: ["that", "timeout"],
          );

  @override
  SubscribeAutoCloseOptions crateApiRelayOptionsSubscribeAutoCloseOptionsNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 168)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRelayOptionsSubscribeAutoCloseOptionsNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRelayOptionsSubscribeAutoCloseOptionsNewConstMeta =>
          const TaskConstMeta(
            debugName: "SubscribeAutoCloseOptions_new",
            argNames: [],
          );

  @override
  SubscribeAutoCloseOptions
      crateApiRelayOptionsSubscribeAutoCloseOptionsTimeout(
          {required SubscribeAutoCloseOptions that, Duration? timeout}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
            that, serializer);
        sse_encode_opt_box_autoadd_Chrono_Duration(timeout, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 169)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiRelayOptionsSubscribeAutoCloseOptionsTimeoutConstMeta,
      argValues: [that, timeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRelayOptionsSubscribeAutoCloseOptionsTimeoutConstMeta =>
          const TaskConstMeta(
            debugName: "SubscribeAutoCloseOptions_timeout",
            argNames: ["that", "timeout"],
          );

  @override
  List<String> crateApiProtocolEventTagTagAsVec({required Tag that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 170)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventTagTagAsVecConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventTagTagAsVecConstMeta =>
      const TaskConstMeta(
        debugName: "Tag_as_vec",
        argNames: ["that"],
      );

  @override
  String? crateApiProtocolEventTagTagContent({required Tag that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 171)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventTagTagContentConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventTagTagContentConstMeta =>
      const TaskConstMeta(
        debugName: "Tag_content",
        argNames: ["that"],
      );

  @override
  bool crateApiProtocolEventTagTagIsProtected({required Tag that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 172)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventTagTagIsProtectedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventTagTagIsProtectedConstMeta =>
      const TaskConstMeta(
        debugName: "Tag_is_protected",
        argNames: ["that"],
      );

  @override
  bool crateApiProtocolEventTagTagIsReply({required Tag that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 173)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventTagTagIsReplyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventTagTagIsReplyConstMeta =>
      const TaskConstMeta(
        debugName: "Tag_is_reply",
        argNames: ["that"],
      );

  @override
  bool crateApiProtocolEventTagTagIsRoot({required Tag that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 174)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventTagTagIsRootConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventTagTagIsRootConstMeta =>
      const TaskConstMeta(
        debugName: "Tag_is_root",
        argNames: ["that"],
      );

  @override
  String crateApiProtocolEventTagTagKind({required Tag that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 175)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventTagTagKindConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventTagTagKindConstMeta =>
      const TaskConstMeta(
        debugName: "Tag_kind",
        argNames: ["that"],
      );

  @override
  Tag crateApiProtocolEventTagTagParse({required List<String> tag}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(tag, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 176)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventTagTagParseConstMeta,
      argValues: [tag],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventTagTagParseConstMeta =>
      const TaskConstMeta(
        debugName: "Tag_parse",
        argNames: ["tag"],
      );

  @override
  List<String> crateApiProtocolEventTagTagToVec({required Tag that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 177)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventTagTagToVecConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventTagTagToVecConstMeta =>
      const TaskConstMeta(
        debugName: "Tag_to_vec",
        argNames: ["that"],
      );

  @override
  Event crateApiProtocolEventUnsignedUnsignedEventAddSignature(
      {required UnsignedEvent that, required String sig}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            that, serializer);
        sse_encode_String(sig, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 178)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiProtocolEventUnsignedUnsignedEventAddSignatureConstMeta,
      argValues: [that, sig],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventUnsignedUnsignedEventAddSignatureConstMeta =>
          const TaskConstMeta(
            debugName: "UnsignedEvent_add_signature",
            argNames: ["that", "sig"],
          );

  @override
  String crateApiProtocolEventUnsignedUnsignedEventAsJson(
      {required UnsignedEvent that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 179)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventUnsignedUnsignedEventAsJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventUnsignedUnsignedEventAsJsonConstMeta =>
          const TaskConstMeta(
            debugName: "UnsignedEvent_as_json",
            argNames: ["that"],
          );

  @override
  String crateApiProtocolEventUnsignedUnsignedEventAsPrettyJson(
      {required UnsignedEvent that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 180)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiProtocolEventUnsignedUnsignedEventAsPrettyJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventUnsignedUnsignedEventAsPrettyJsonConstMeta =>
          const TaskConstMeta(
            debugName: "UnsignedEvent_as_pretty_json",
            argNames: ["that"],
          );

  @override
  PublicKey crateApiProtocolEventUnsignedUnsignedEventAuthor(
      {required UnsignedEvent that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 181)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventUnsignedUnsignedEventAuthorConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventUnsignedUnsignedEventAuthorConstMeta =>
          const TaskConstMeta(
            debugName: "UnsignedEvent_author",
            argNames: ["that"],
          );

  @override
  String crateApiProtocolEventUnsignedUnsignedEventContent(
      {required UnsignedEvent that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 182)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventUnsignedUnsignedEventContentConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventUnsignedUnsignedEventContentConstMeta =>
          const TaskConstMeta(
            debugName: "UnsignedEvent_content",
            argNames: ["that"],
          );

  @override
  BigInt crateApiProtocolEventUnsignedUnsignedEventCreatedAt(
      {required UnsignedEvent that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 183)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventUnsignedUnsignedEventCreatedAtConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventUnsignedUnsignedEventCreatedAtConstMeta =>
          const TaskConstMeta(
            debugName: "UnsignedEvent_created_at",
            argNames: ["that"],
          );

  @override
  UnsignedEvent crateApiProtocolEventUnsignedUnsignedEventFromJson(
      {required String json}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(json, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 184)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventUnsignedUnsignedEventFromJsonConstMeta,
      argValues: [json],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventUnsignedUnsignedEventFromJsonConstMeta =>
          const TaskConstMeta(
            debugName: "UnsignedEvent_from_json",
            argNames: ["json"],
          );

  @override
  EventId? crateApiProtocolEventUnsignedUnsignedEventId(
      {required UnsignedEvent that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 185)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventUnsignedUnsignedEventIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventUnsignedUnsignedEventIdConstMeta =>
      const TaskConstMeta(
        debugName: "UnsignedEvent_id",
        argNames: ["that"],
      );

  @override
  int crateApiProtocolEventUnsignedUnsignedEventKind(
      {required UnsignedEvent that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 186)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventUnsignedUnsignedEventKindConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventUnsignedUnsignedEventKindConstMeta =>
      const TaskConstMeta(
        debugName: "UnsignedEvent_kind",
        argNames: ["that"],
      );

  @override
  List<Tag> crateApiProtocolEventUnsignedUnsignedEventTags(
      {required UnsignedEvent that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 187)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventUnsignedUnsignedEventTagsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventUnsignedUnsignedEventTagsConstMeta =>
      const TaskConstMeta(
        debugName: "UnsignedEvent_tags",
        argNames: ["that"],
      );

  @override
  Future<UnwrappedGift> crateApiProtocolNipsNip59UnwrappedGiftFromGiftWrap(
      {required NostrSigner signer, required Event giftWrap}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            signer, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            giftWrap, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 188, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnwrappedGift,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolNipsNip59UnwrappedGiftFromGiftWrapConstMeta,
      argValues: [signer, giftWrap],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolNipsNip59UnwrappedGiftFromGiftWrapConstMeta =>
          const TaskConstMeta(
            debugName: "UnwrappedGift_from_gift_wrap",
            argNames: ["signer", "giftWrap"],
          );

  @override
  UnsignedEvent crateApiProtocolNipsNip59UnwrappedGiftRumor(
      {required UnwrappedGift that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnwrappedGift(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 189)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolNipsNip59UnwrappedGiftRumorConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolNipsNip59UnwrappedGiftRumorConstMeta =>
      const TaskConstMeta(
        debugName: "UnwrappedGift_rumor",
        argNames: ["that"],
      );

  @override
  PublicKey crateApiProtocolNipsNip59UnwrappedGiftSender(
      {required UnwrappedGift that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnwrappedGift(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 190)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolNipsNip59UnwrappedGiftSenderConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolNipsNip59UnwrappedGiftSenderConstMeta =>
      const TaskConstMeta(
        debugName: "UnwrappedGift_sender",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 191, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Client => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Client => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ClientBuilder => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ClientBuilder => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ClientOptions => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ClientOptions => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Connection => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Connection => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Event =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Event =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EventBuilder => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EventBuilder => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EventId => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EventId => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Events => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Events => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Filter => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Filter => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Keys =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Keys =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NostrDatabase => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NostrDatabase => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NostrSigner => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NostrSigner => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PublicKey => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PublicKey => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SecretKey => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SecretKey => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SingleLetterTag => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SingleLetterTag;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SingleLetterTag => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SingleLetterTag;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SubscribeAutoCloseOptions => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SubscribeAutoCloseOptions => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Tag => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Tag => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UnsignedEvent => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UnsignedEvent => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UnwrappedGift => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnwrappedGift;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UnwrappedGift => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnwrappedGift;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Event
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
        raw);
  }

  @protected
  Client
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientBuilder
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientOptions
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientOptionsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Connection
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Event
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EventBuilder
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EventId
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Events
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Filter
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FilterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Keys
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeysImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NostrDatabase
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NostrDatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NostrSigner
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NostrSignerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicKey
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SecretKey
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SecretKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SingleLetterTag
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SingleLetterTag(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SingleLetterTagImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SubscribeAutoCloseOptions
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SubscribeAutoCloseOptionsImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  Tag dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TagImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UnsignedEvent
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UnsignedEventImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UnwrappedGift
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnwrappedGift(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UnwrappedGiftImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Client
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientBuilder
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientOptions
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientOptionsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Connection
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Event
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EventBuilder
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EventId
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Events
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Filter
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FilterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Keys
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeysImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NostrDatabase
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NostrDatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NostrSigner
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NostrSignerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicKey
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SecretKey
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SecretKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SingleLetterTag
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SingleLetterTag(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SingleLetterTagImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SubscribeAutoCloseOptions
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SubscribeAutoCloseOptionsImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  Tag dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TagImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UnsignedEvent
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UnsignedEventImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UnwrappedGift
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnwrappedGift(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UnwrappedGiftImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Duration dco_decode_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeDuration(dco_decode_i_64(raw).toInt());
  }

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Client
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientBuilder
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientOptions
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientOptionsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Connection
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Event
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EventBuilder
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EventId
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Events
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Filter
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FilterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Keys
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeysImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NostrDatabase
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NostrDatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NostrSigner
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NostrSignerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicKey
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SecretKey
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SecretKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SingleLetterTag
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SingleLetterTag(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SingleLetterTagImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SubscribeAutoCloseOptions
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SubscribeAutoCloseOptionsImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  Tag dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TagImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UnsignedEvent
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UnsignedEventImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UnwrappedGift
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnwrappedGift(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UnwrappedGiftImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Set<String> dco_decode_Set_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_String(raw));
  }

  @protected
  RustStreamSink<RelayPoolNotification>
      dco_decode_StreamSink_relay_pool_notification_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Alphabet dco_decode_alphabet(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Alphabet.values[raw as int];
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Event
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
        raw);
  }

  @protected
  EventId
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
        raw);
  }

  @protected
  SubscribeAutoCloseOptions
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
        raw);
  }

  @protected
  Duration dco_decode_box_autoadd_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Chrono_Duration(raw);
  }

  @protected
  ConnectionMode dco_decode_box_autoadd_connection_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_connection_mode(raw);
  }

  @protected
  ReqExitPolicy dco_decode_box_autoadd_req_exit_policy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_req_exit_policy(raw);
  }

  @protected
  ConnectionMode dco_decode_connection_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return const ConnectionMode_Direct();
      case 1:
        return ConnectionMode_Proxy(
          addr: dco_decode_String(raw[1]),
        );
      case 2:
        return ConnectionMode_Tor(
          customPath: dco_decode_opt_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ConnectionTarget dco_decode_connection_target(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectionTarget.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<Event>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event)
        .toList();
  }

  @protected
  List<EventId>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId)
        .toList();
  }

  @protected
  List<PublicKey>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey)
        .toList();
  }

  @protected
  List<Tag>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag)
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_16_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint16List dco_decode_list_prim_u_16_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint16List;
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Event?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            raw);
  }

  @protected
  EventId?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
            raw);
  }

  @protected
  SubscribeAutoCloseOptions?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
            raw);
  }

  @protected
  Duration? dco_decode_opt_box_autoadd_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Duration(raw);
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  RejectedReason dco_decode_rejected_reason(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RejectedReason.values[raw as int];
  }

  @protected
  RelayPoolNotification dco_decode_relay_pool_notification(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return RelayPoolNotification_Event(
          relayUrl: dco_decode_String(raw[1]),
          subscriptionId: dco_decode_String(raw[2]),
          event:
              dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
                  raw[3]),
        );
      case 1:
        return RelayPoolNotification_Message(
          relayUrl: dco_decode_String(raw[1]),
          message: dco_decode_String(raw[2]),
        );
      case 2:
        return const RelayPoolNotification_Shutdown();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ReqExitPolicy dco_decode_req_exit_policy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return const ReqExitPolicy_ExitOnEOSE();
      case 1:
        return ReqExitPolicy_WaitForEventsAfterEOSE(
          dco_decode_u_16(raw[1]),
        );
      case 2:
        return ReqExitPolicy_WaitDurationAfterEOSE(
          dco_decode_Chrono_Duration(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SaveEventStatus dco_decode_save_event_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return const SaveEventStatus_Success();
      case 1:
        return SaveEventStatus_Rejected(
          dco_decode_rejected_reason(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SendEventOutput dco_decode_send_event_output(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SendEventOutput(
      id: dco_decode_String(arr[0]),
      success: dco_decode_Set_String(arr[1]),
      failed: dco_decode_Map_String_String(arr[2]),
    );
  }

  @protected
  SignerBackend dco_decode_signer_backend(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return const SignerBackend_Keys();
      case 1:
        return const SignerBackend_BrowserExtension();
      case 2:
        return const SignerBackend_NostrConnect();
      case 3:
        return SignerBackend_Custom(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Event
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            deserializer);
    return inner;
  }

  @protected
  Client
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientBuilder
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientOptions
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientOptionsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Connection
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConnectionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Event
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EventBuilder
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EventId
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventIdImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Events
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Filter
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FilterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Keys
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeysImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NostrDatabase
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NostrDatabaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NostrSigner
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NostrSignerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PublicKey
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SecretKey
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SecretKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SingleLetterTag
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SingleLetterTag(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SingleLetterTagImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SubscribeAutoCloseOptions
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SubscribeAutoCloseOptionsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Tag sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TagImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UnsignedEvent
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UnsignedEventImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UnwrappedGift
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnwrappedGift(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UnwrappedGiftImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Client
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientBuilder
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientOptions
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientOptionsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Connection
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConnectionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Event
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EventBuilder
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EventId
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventIdImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Events
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Filter
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FilterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Keys
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeysImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NostrDatabase
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NostrDatabaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NostrSigner
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NostrSignerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PublicKey
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SecretKey
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SecretKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SingleLetterTag
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SingleLetterTag(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SingleLetterTagImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SubscribeAutoCloseOptions
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SubscribeAutoCloseOptionsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Tag sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TagImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UnsignedEvent
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UnsignedEventImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UnwrappedGift
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnwrappedGift(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UnwrappedGiftImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Duration sse_decode_Chrono_Duration(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return Duration(microseconds: inner.toInt());
  }

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Client
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientBuilder
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientOptions
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientOptionsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Connection
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConnectionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Event
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EventBuilder
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EventId
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventIdImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Events
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Filter
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FilterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Keys
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeysImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NostrDatabase
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NostrDatabaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NostrSigner
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NostrSignerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PublicKey
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SecretKey
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SecretKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SingleLetterTag
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SingleLetterTag(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SingleLetterTagImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SubscribeAutoCloseOptions
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SubscribeAutoCloseOptionsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Tag sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TagImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UnsignedEvent
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UnsignedEventImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UnwrappedGift
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnwrappedGift(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UnwrappedGiftImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Set<String> sse_decode_Set_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_String(deserializer);
    return Set.from(inner);
  }

  @protected
  RustStreamSink<RelayPoolNotification>
      sse_decode_StreamSink_relay_pool_notification_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Alphabet sse_decode_alphabet(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Alphabet.values[inner];
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Event
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
        deserializer));
  }

  @protected
  EventId
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
        deserializer));
  }

  @protected
  SubscribeAutoCloseOptions
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
        deserializer));
  }

  @protected
  Duration sse_decode_box_autoadd_Chrono_Duration(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Chrono_Duration(deserializer));
  }

  @protected
  ConnectionMode sse_decode_box_autoadd_connection_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_connection_mode(deserializer));
  }

  @protected
  ReqExitPolicy sse_decode_box_autoadd_req_exit_policy(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_req_exit_policy(deserializer));
  }

  @protected
  ConnectionMode sse_decode_connection_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return const ConnectionMode_Direct();
      case 1:
        var var_addr = sse_decode_String(deserializer);
        return ConnectionMode_Proxy(addr: var_addr);
      case 2:
        var var_customPath = sse_decode_opt_String(deserializer);
        return ConnectionMode_Tor(customPath: var_customPath);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ConnectionTarget sse_decode_connection_target(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ConnectionTarget.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<Event>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Event>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<EventId>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EventId>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<PublicKey>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PublicKey>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<Tag>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Tag>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_16_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint16List(len_);
  }

  @protected
  Uint16List sse_decode_list_prim_u_16_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint16List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Event?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  EventId?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  SubscribeAutoCloseOptions?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  Duration? sse_decode_opt_box_autoadd_Chrono_Duration(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Duration(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  RejectedReason sse_decode_rejected_reason(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return RejectedReason.values[inner];
  }

  @protected
  RelayPoolNotification sse_decode_relay_pool_notification(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_relayUrl = sse_decode_String(deserializer);
        var var_subscriptionId = sse_decode_String(deserializer);
        var var_event =
            sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
                deserializer);
        return RelayPoolNotification_Event(
            relayUrl: var_relayUrl,
            subscriptionId: var_subscriptionId,
            event: var_event);
      case 1:
        var var_relayUrl = sse_decode_String(deserializer);
        var var_message = sse_decode_String(deserializer);
        return RelayPoolNotification_Message(
            relayUrl: var_relayUrl, message: var_message);
      case 2:
        return const RelayPoolNotification_Shutdown();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ReqExitPolicy sse_decode_req_exit_policy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return const ReqExitPolicy_ExitOnEOSE();
      case 1:
        var var_field0 = sse_decode_u_16(deserializer);
        return ReqExitPolicy_WaitForEventsAfterEOSE(var_field0);
      case 2:
        var var_field0 = sse_decode_Chrono_Duration(deserializer);
        return ReqExitPolicy_WaitDurationAfterEOSE(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SaveEventStatus sse_decode_save_event_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return const SaveEventStatus_Success();
      case 1:
        var var_field0 = sse_decode_rejected_reason(deserializer);
        return SaveEventStatus_Rejected(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SendEventOutput sse_decode_send_event_output(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_success = sse_decode_Set_String(deserializer);
    var var_failed = sse_decode_Map_String_String(deserializer);
    return SendEventOutput(
        id: var_id, success: var_success, failed: var_failed);
  }

  @protected
  SignerBackend sse_decode_signer_backend(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return const SignerBackend_Keys();
      case 1:
        return const SignerBackend_BrowserExtension();
      case 2:
        return const SignerBackend_NostrConnect();
      case 3:
        var var_field0 = sse_decode_String(deserializer);
        return SignerBackend_Custom(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          Event self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
        self, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
          Client self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
          ClientBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientBuilderImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
          ClientOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientOptionsImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
          Connection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConnectionImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          Event self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
          EventBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventBuilderImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          EventId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventIdImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events(
          Events self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventsImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
          Filter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FilterImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
          Keys self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeysImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase(
          NostrDatabase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NostrDatabaseImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
          NostrSigner self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NostrSignerImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PublicKeyImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
          SecretKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SecretKeyImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SingleLetterTag(
          SingleLetterTag self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SingleLetterTagImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
          SubscribeAutoCloseOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SubscribeAutoCloseOptionsImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
          Tag self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TagImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
          UnsignedEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UnsignedEventImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnwrappedGift(
          UnwrappedGift self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UnwrappedGiftImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
          Client self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
          ClientBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientBuilderImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
          ClientOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientOptionsImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
          Connection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConnectionImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          Event self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
          EventBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventBuilderImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          EventId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventIdImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events(
          Events self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventsImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
          Filter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FilterImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
          Keys self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeysImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase(
          NostrDatabase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NostrDatabaseImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
          NostrSigner self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NostrSignerImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PublicKeyImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
          SecretKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SecretKeyImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SingleLetterTag(
          SingleLetterTag self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SingleLetterTagImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
          SubscribeAutoCloseOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SubscribeAutoCloseOptionsImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
          Tag self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TagImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
          UnsignedEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UnsignedEventImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnwrappedGift(
          UnwrappedGift self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UnwrappedGiftImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_Chrono_Duration(Duration self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(PlatformInt64Util.from(self.inMicroseconds), serializer);
  }

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
          Client self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
          ClientBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientBuilderImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
          ClientOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientOptionsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
          Connection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConnectionImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          Event self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
          EventBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventBuilderImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          EventId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventIdImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Events(
          Events self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventsImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Filter(
          Filter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FilterImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
          Keys self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeysImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrDatabase(
          NostrDatabase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NostrDatabaseImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
          NostrSigner self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NostrSignerImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PublicKeyImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
          SecretKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SecretKeyImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SingleLetterTag(
          SingleLetterTag self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SingleLetterTagImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
          SubscribeAutoCloseOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SubscribeAutoCloseOptionsImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
          Tag self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TagImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
          UnsignedEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UnsignedEventImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnwrappedGift(
          UnwrappedGift self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UnwrappedGiftImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_Set_String(Set<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.toList(), serializer);
  }

  @protected
  void sse_encode_StreamSink_relay_pool_notification_Sse(
      RustStreamSink<RelayPoolNotification> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_relay_pool_notification,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_alphabet(Alphabet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          Event self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          EventId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
          SubscribeAutoCloseOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_Chrono_Duration(
      Duration self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Duration(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_connection_mode(
      ConnectionMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_connection_mode(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_req_exit_policy(
      ReqExitPolicy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_req_exit_policy(self, serializer);
  }

  @protected
  void sse_encode_connection_mode(
      ConnectionMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ConnectionMode_Direct():
        sse_encode_i_32(0, serializer);
      case ConnectionMode_Proxy(addr: final addr):
        sse_encode_i_32(1, serializer);
        sse_encode_String(addr, serializer);
      case ConnectionMode_Tor(customPath: final customPath):
        sse_encode_i_32(2, serializer);
        sse_encode_opt_String(customPath, serializer);
    }
  }

  @protected
  void sse_encode_connection_target(
      ConnectionTarget self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          List<Event> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          List<EventId> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          List<PublicKey> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
          List<Tag> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_16_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint16List(self is Uint16List ? self : Uint16List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_16_strict(
      Uint16List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint16List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          Event? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          EventId? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventId(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
          SubscribeAutoCloseOptions? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SubscribeAutoCloseOptions(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Duration(
      Duration? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Chrono_Duration(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_rejected_reason(
      RejectedReason self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_relay_pool_notification(
      RelayPoolNotification self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case RelayPoolNotification_Event(
          relayUrl: final relayUrl,
          subscriptionId: final subscriptionId,
          event: final event
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(relayUrl, serializer);
        sse_encode_String(subscriptionId, serializer);
        sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            event, serializer);
      case RelayPoolNotification_Message(
          relayUrl: final relayUrl,
          message: final message
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_String(relayUrl, serializer);
        sse_encode_String(message, serializer);
      case RelayPoolNotification_Shutdown():
        sse_encode_i_32(2, serializer);
    }
  }

  @protected
  void sse_encode_req_exit_policy(
      ReqExitPolicy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ReqExitPolicy_ExitOnEOSE():
        sse_encode_i_32(0, serializer);
      case ReqExitPolicy_WaitForEventsAfterEOSE(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_u_16(field0, serializer);
      case ReqExitPolicy_WaitDurationAfterEOSE(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_Chrono_Duration(field0, serializer);
    }
  }

  @protected
  void sse_encode_save_event_status(
      SaveEventStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SaveEventStatus_Success():
        sse_encode_i_32(0, serializer);
      case SaveEventStatus_Rejected(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_rejected_reason(field0, serializer);
    }
  }

  @protected
  void sse_encode_send_event_output(
      SendEventOutput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_Set_String(self.success, serializer);
    sse_encode_Map_String_String(self.failed, serializer);
  }

  @protected
  void sse_encode_signer_backend(SignerBackend self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SignerBackend_Keys():
        sse_encode_i_32(0, serializer);
      case SignerBackend_BrowserExtension():
        sse_encode_i_32(1, serializer);
      case SignerBackend_NostrConnect():
        sse_encode_i_32(2, serializer);
      case SignerBackend_Custom(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class ClientBuilderImpl extends RustOpaque implements ClientBuilder {
  // Not to be used by end users
  ClientBuilderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ClientBuilderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_ClientBuilder,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_ClientBuilder,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_ClientBuilderPtr,
  );

  /// Build client
  Client build() =>
      NostrSdk.instance.api.crateApiClientBuilderClientBuilderBuild(
        that: this,
      );

  /// Set database
  ClientBuilder database({required NostrDatabase database}) =>
      NostrSdk.instance.api.crateApiClientBuilderClientBuilderDatabase(
          that: this, database: database);

  /// Set opts
  ClientBuilder opts({required ClientOptions opts}) => NostrSdk.instance.api
      .crateApiClientBuilderClientBuilderOpts(that: this, opts: opts);

  /// Set signer
  ClientBuilder signer({required NostrSigner signer}) => NostrSdk.instance.api
      .crateApiClientBuilderClientBuilderSigner(that: this, signer: signer);
}

@sealed
class ClientImpl extends RustOpaque implements Client {
  // Not to be used by end users
  ClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_Client,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_Client,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_ClientPtr,
  );

  /// Add discovery relay
  ///
  /// If relay already exists, this method automatically add the [`RelayServiceFlags::DISCOVERY`] flag to it and return `false`.
  ///
  /// <https://github.com/nostr-protocol/nips/blob/master/65.md>
  Future<bool> addDiscoveryRelay({required String url}) => NostrSdk.instance.api
      .crateApiClientClientAddDiscoveryRelay(that: this, url: url);

  /// Add read relay
  ///
  /// If relay already exists, this method add the [`RelayServiceFlags::READ`] flag to it and return `false`.
  ///
  /// If are set pool subscriptions, the new added relay will inherit them. Use `subscribe_to` method instead of `subscribe`,
  /// to avoid to set pool subscriptions.
  Future<bool> addReadRelay({required String url}) => NostrSdk.instance.api
      .crateApiClientClientAddReadRelay(that: this, url: url);

  /// Add relay
  ///
  /// Relays added with this method will have both `READ` and `WRITE` flags enabled.
  ///
  /// If the relay already exists, the flags will be updated and `false` returned.
  ///
  /// If are set pool subscriptions, the new added relay will inherit them.
  ///
  /// Connection is **NOT** automatically started with relay, remember to call `connect` method!
  Future<bool> addRelay({required String url}) =>
      NostrSdk.instance.api.crateApiClientClientAddRelay(that: this, url: url);

  /// Add write relay
  ///
  /// If relay already exists, this method add the [`RelayServiceFlags::WRITE`] flag to it and return `false`.
  Future<bool> addWriteRelay({required String url}) => NostrSdk.instance.api
      .crateApiClientClientAddWriteRelay(that: this, url: url);

  /// Auto authenticate to relays (default: true)
  ///
  /// <https://github.com/nostr-protocol/nips/blob/master/42.md>
  void automaticAuthentication({required bool enable}) => NostrSdk.instance.api
      .crateApiClientClientAutomaticAuthentication(that: this, enable: enable);

  /// Connect to all added relays
  Future<void> connect() => NostrSdk.instance.api.crateApiClientClientConnect(
        that: this,
      );

  /// Connect to a previously added relay
  Future<void> connectRelay({required String url}) => NostrSdk.instance.api
      .crateApiClientClientConnectRelay(that: this, url: url);

  /// Get database
  Future<NostrDatabase> database() =>
      NostrSdk.instance.api.crateApiClientClientDatabase(
        that: this,
      );

  /// Disconnect from all relays
  Future<void> disconnect() =>
      NostrSdk.instance.api.crateApiClientClientDisconnect(
        that: this,
      );

  /// Disconnect relay
  Future<void> disconnectRelay({required String url}) => NostrSdk.instance.api
      .crateApiClientClientDisconnectRelay(that: this, url: url);

  /// Fetch events from relays
  ///
  /// If `gossip` is enabled (see [`Options::gossip`]) the events will be requested also to
  /// NIP65 relays (automatically discovered) of public keys included in filters (if any).
  Future<Events> fetchEvents(
          {required Filter filter, required Duration timeout}) =>
      NostrSdk.instance.api.crateApiClientClientFetchEvents(
          that: this, filter: filter, timeout: timeout);

  /// Fetch events from specific relays.
  Future<Events> fetchEventsFrom(
          {required List<String> urls,
          required Filter filter,
          required Duration timeout}) =>
      NostrSdk.instance.api.crateApiClientClientFetchEventsFrom(
          that: this, urls: urls, filter: filter, timeout: timeout);

  /// Disconnect and force remove all relays
  Future<void> forceRemoveAllRelays() =>
      NostrSdk.instance.api.crateApiClientClientForceRemoveAllRelays(
        that: this,
      );

  /// Force remove and disconnect relay
  ///
  /// Note: this method will remove the relay, also if it's in use for the gossip model or other service!
  Future<void> forceRemoveRelay({required String url}) => NostrSdk.instance.api
      .crateApiClientClientForceRemoveRelay(that: this, url: url);

  Stream<RelayPoolNotification> handleNotifications() =>
      NostrSdk.instance.api.crateApiClientClientHandleNotifications(
        that: this,
      );

  /// Check if signer is configured
  Future<bool> hasSigner() =>
      NostrSdk.instance.api.crateApiClientClientHasSigner(
        that: this,
      );

  /// Disconnect and remove all relays
  ///
  /// Some relays used by some services could not be disconnected with this method
  /// (like the ones used for gossip).
  /// Use [`Client::force_remove_all_relays`] to remove every relay.
  Future<void> removeAllRelays() =>
      NostrSdk.instance.api.crateApiClientClientRemoveAllRelays(
        that: this,
      );

  /// Remove and disconnect relay
  ///
  /// If the relay has [`RelayServiceFlags::GOSSIP`], it will not be removed from the pool and its
  /// flags will be updated (remove [`RelayServiceFlags::READ`],
  /// [`RelayServiceFlags::WRITE`] and [`RelayServiceFlags::DISCOVERY`] flags).
  ///
  /// To force remove the relay, use [`Client::force_remove_relay`].
  Future<void> removeRelay({required String url}) => NostrSdk.instance.api
      .crateApiClientClientRemoveRelay(that: this, url: url);

  /// Reset client
  ///
  /// This method reset the client to simplify the switch to another account.
  Future<void> reset() => NostrSdk.instance.api.crateApiClientClientReset(
        that: this,
      );

  /// Send event
  ///
  /// Send `Event` to all relays with `WRITE` flag.
  /// If `gossip` option is enabled, the event will be sent also to NIP65 relays (automatically discovered).
  Future<SendEventOutput> sendEvent({required Event event}) =>
      NostrSdk.instance.api
          .crateApiClientClientSendEvent(that: this, event: event);

  /// Send event
  ///
  /// Take an [`EventBuilder`], sign it by using the [`NostrSigner`] and broadcast to relays (check [`Client::send_event`] from more details).
  ///
  /// Return an error if the [`NostrSigner`] is not set.
  Future<SendEventOutput> sendEventBuilder({required EventBuilder builder}) =>
      NostrSdk.instance.api
          .crateApiClientClientSendEventBuilder(that: this, builder: builder);

  /// Send event to specific relays.
  Future<SendEventOutput> sendEventTo(
          {required List<String> urls, required Event event}) =>
      NostrSdk.instance.api.crateApiClientClientSendEventTo(
          that: this, urls: urls, event: event);

  /// Set nostr signer
  Future<void> setSigner({required NostrSigner signer}) => NostrSdk.instance.api
      .crateApiClientClientSetSigner(that: this, signer: signer);

  /// Completely shutdown client
  Future<void> shutdown() => NostrSdk.instance.api.crateApiClientClientShutdown(
        that: this,
      );

  /// Get current nostr signer
  ///
  /// Rise error if it not set.
  Future<NostrSigner> signer() =>
      NostrSdk.instance.api.crateApiClientClientSigner(
        that: this,
      );

  /// Subscribe to filters
  ///
  /// This method creates a new subscription. None of the previous subscriptions will be edited/closed when you call this!
  /// So remember to unsubscribe when you no longer need it.
  ///
  /// If `gossip` is enabled (see [`Options::gossip`]) the events will be requested also to
  /// NIP65 relays (automatically discovered) of public keys included in filters (if any).
  ///
  /// # Auto-closing subscription
  ///
  /// It's possible to automatically close a subscription by configuring the [SubscribeAutoCloseOptions].
  ///
  /// Note: auto-closing subscriptions aren't saved in subscriptions map!
  Future<String> subscribe(
          {required Filter filter, SubscribeAutoCloseOptions? opts}) =>
      NostrSdk.instance.api.crateApiClientClientSubscribe(
          that: this, filter: filter, opts: opts);

  /// Subscribe to filters to specific relays
  ///
  /// This method creates a new subscription. None of the previous subscriptions will be edited/closed when you call this!
  /// So remember to unsubscribe when you no longer need it.
  ///
  /// ### Auto-closing subscription
  ///
  /// It's possible to automatically close a subscription by configuring the [SubscribeAutoCloseOptions].
  Future<String> subscribeTo(
          {required List<String> urls,
          required Filter filter,
          SubscribeAutoCloseOptions? opts}) =>
      NostrSdk.instance.api.crateApiClientClientSubscribeTo(
          that: this, urls: urls, filter: filter, opts: opts);

  /// Subscribe to filters with custom [SubscriptionId]
  ///
  /// If `gossip` is enabled (see [`Options::gossip`]) the events will be requested also to
  /// NIP65 relays (automatically discovered) of public keys included in filters (if any).
  ///
  /// # Auto-closing subscription
  ///
  /// It's possible to automatically close a subscription by configuring the [SubscribeAutoCloseOptions].
  ///
  /// Note: auto-closing subscriptions aren't saved in subscriptions map!
  Future<void> subscribeWithId(
          {required String id,
          required Filter filter,
          SubscribeAutoCloseOptions? opts}) =>
      NostrSdk.instance.api.crateApiClientClientSubscribeWithId(
          that: this, id: id, filter: filter, opts: opts);

  /// Subscribe to filters with custom [SubscriptionId] to specific relays
  ///
  /// ### Auto-closing subscription
  ///
  /// It's possible to automatically close a subscription by configuring the [SubscribeAutoCloseOptions].
  Future<void> subscribeWithIdTo(
          {required List<String> urls,
          required String id,
          required Filter filter,
          SubscribeAutoCloseOptions? opts}) =>
      NostrSdk.instance.api.crateApiClientClientSubscribeWithIdTo(
          that: this, urls: urls, id: id, filter: filter, opts: opts);

  /// Unset nostr signer
  Future<void> unsetSigner() =>
      NostrSdk.instance.api.crateApiClientClientUnsetSigner(
        that: this,
      );
}

@sealed
class ClientOptionsImpl extends RustOpaque implements ClientOptions {
  // Not to be used by end users
  ClientOptionsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ClientOptionsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_ClientOptions,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_ClientOptions,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_ClientOptionsPtr,
  );

  /// Automatically start connection with relays (default: false)
  ///
  /// When set to `true`, there isn't the need of calling the connect methods.
  ClientOptions autoconnect({required bool val}) => NostrSdk.instance.api
      .crateApiClientOptionsClientOptionsAutoconnect(that: this, val: val);

  /// Auto authenticate to relays (default: true)
  ///
  /// <https://github.com/nostr-protocol/nips/blob/master/42.md>
  ClientOptions automaticAuthentication({required bool enabled}) =>
      NostrSdk.instance.api
          .crateApiClientOptionsClientOptionsAutomaticAuthentication(
              that: this, enabled: enabled);

  /// Connection
  ClientOptions connection({required Connection connection}) =>
      NostrSdk.instance.api.crateApiClientOptionsClientOptionsConnection(
          that: this, connection: connection);

  /// Enable gossip model (default: false)
  ClientOptions gossip({required bool enabled}) => NostrSdk.instance.api
      .crateApiClientOptionsClientOptionsGossip(that: this, enabled: enabled);

  /// Minimum POW difficulty for received events
  ClientOptions minPow({required int difficulty}) =>
      NostrSdk.instance.api.crateApiClientOptionsClientOptionsMinPow(
          that: this, difficulty: difficulty);
}

@sealed
class ConnectionImpl extends RustOpaque implements Connection {
  // Not to be used by end users
  ConnectionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConnectionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_Connection,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_Connection,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_ConnectionPtr,
  );

  /// Set proxy (ex. `127.0.0.1:9050`)
  Connection addr({required String addr}) => NostrSdk.instance.api
      .crateApiClientOptionsConnectionAddr(that: this, addr: addr);

  /// Use embedded tor client
  ///
  /// This not work on `android` and/or `ios` targets.
  /// Use [`Connection::embedded_tor_with_path`] instead.
  Connection embeddedTor() =>
      NostrSdk.instance.api.crateApiClientOptionsConnectionEmbeddedTor(
        that: this,
      );

  /// Use embedded tor client
  ///
  /// Specify a path where to store data
  Connection embeddedTorWithPath({required String dataPath}) =>
      NostrSdk.instance.api.crateApiClientOptionsConnectionEmbeddedTorWithPath(
          that: this, dataPath: dataPath);

  /// Set connection mode (default: direct)
  Connection mode({required ConnectionMode mode}) => NostrSdk.instance.api
      .crateApiClientOptionsConnectionMode(that: this, mode: mode);

  /// Set connection target (default: all)
  Connection target({required ConnectionTarget target}) => NostrSdk.instance.api
      .crateApiClientOptionsConnectionTarget(that: this, target: target);
}

@sealed
class EventBuilderImpl extends RustOpaque implements EventBuilder {
  // Not to be used by end users
  EventBuilderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EventBuilderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_EventBuilder,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_EventBuilder,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_EventBuilderPtr,
  );

  /// Build unsigned event
  UnsignedEvent build({required PublicKey publicKey}) =>
      NostrSdk.instance.api.crateApiProtocolEventBuilderEventBuilderBuild(
          that: this, publicKey: publicKey);

  /// Set a custom `created_at` UNIX timestamp
  EventBuilder customCreatedAt({required BigInt createdAt}) => NostrSdk
      .instance.api
      .crateApiProtocolEventBuilderEventBuilderCustomCreatedAt(
          that: this, createdAt: createdAt);

  /// Set POW difficulty
  ///
  /// Only values `> 0` are accepted!
  EventBuilder pow({required int difficulty}) =>
      NostrSdk.instance.api.crateApiProtocolEventBuilderEventBuilderPow(
          that: this, difficulty: difficulty);

  /// Build, sign and return event
  Future<Event> sign({required NostrSigner signer}) => NostrSdk.instance.api
      .crateApiProtocolEventBuilderEventBuilderSign(that: this, signer: signer);

  /// Build, sign and return event using keys signer
  Event signWithKeys({required Keys keys}) => NostrSdk.instance.api
      .crateApiProtocolEventBuilderEventBuilderSignWithKeys(
          that: this, keys: keys);

  /// Add tag
  EventBuilder tag({required Tag tag}) => NostrSdk.instance.api
      .crateApiProtocolEventBuilderEventBuilderTag(that: this, tag: tag);

  /// Add tags
  ///
  /// This method extends the current tags (if any).
  EventBuilder tags({required List<Tag> tags}) => NostrSdk.instance.api
      .crateApiProtocolEventBuilderEventBuilderTags(that: this, tags: tags);
}

@sealed
class EventIdImpl extends RustOpaque implements EventId {
  // Not to be used by end users
  EventIdImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EventIdImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_EventId,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_EventId,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_EventIdPtr,
  );

  /// Serialize to bech32
  String toBech32() =>
      NostrSdk.instance.api.crateApiProtocolEventIdEventIdToBech32(
        that: this,
      );

  /// Get bytes
  Uint8List toBytes() =>
      NostrSdk.instance.api.crateApiProtocolEventIdEventIdToBytes(
        that: this,
      );

  /// Serialize to hex
  String toHex() => NostrSdk.instance.api.crateApiProtocolEventIdEventIdToHex(
        that: this,
      );

  /// Serialize as nostr URI
  String toNostrUri() =>
      NostrSdk.instance.api.crateApiProtocolEventIdEventIdToNostrUri(
        that: this,
      );
}

@sealed
class EventImpl extends RustOpaque implements Event {
  // Not to be used by end users
  EventImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EventImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_Event,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_Event,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_EventPtr,
  );

  /// Serialize as JSON
  String asJson() => NostrSdk.instance.api.crateApiProtocolEventEventAsJson(
        that: this,
      );

  /// Serialize as pretty JSON
  String asPrettyJson() =>
      NostrSdk.instance.api.crateApiProtocolEventEventAsPrettyJson(
        that: this,
      );

  /// Get event author (`pubkey` field)
  PublicKey author() => NostrSdk.instance.api.crateApiProtocolEventEventAuthor(
        that: this,
      );

  /// Get event content
  String content() => NostrSdk.instance.api.crateApiProtocolEventEventContent(
        that: this,
      );

  /// Get UNIX timestamp
  BigInt createdAt() =>
      NostrSdk.instance.api.crateApiProtocolEventEventCreatedAt(
        that: this,
      );

  /// Get event ID
  EventId id() => NostrSdk.instance.api.crateApiProtocolEventEventId(
        that: this,
      );

  /// Returns `true` if the event has an expiration tag that is expired.
  /// If an event has no expiration tag, then it will return `false`.
  ///
  /// <https://github.com/nostr-protocol/nips/blob/master/40.md>
  bool isExpired() => NostrSdk.instance.api.crateApiProtocolEventEventIsExpired(
        that: this,
      );

  /// Check if it's a protected event
  ///
  /// <https://github.com/nostr-protocol/nips/blob/master/70.md>
  bool isProtected() =>
      NostrSdk.instance.api.crateApiProtocolEventEventIsProtected(
        that: this,
      );

  /// Get event kind
  int kind() => NostrSdk.instance.api.crateApiProtocolEventEventKind(
        that: this,
      );

  /// Get event signature
  String signature() =>
      NostrSdk.instance.api.crateApiProtocolEventEventSignature(
        that: this,
      );

  /// Get event tags
  List<Tag> tags() => NostrSdk.instance.api.crateApiProtocolEventEventTags(
        that: this,
      );

  /// Verify both the event ID and the signature
  void verify() => NostrSdk.instance.api.crateApiProtocolEventEventVerify(
        that: this,
      );

  /// Verify if the event ID it's composed correctly
  bool verifyId() => NostrSdk.instance.api.crateApiProtocolEventEventVerifyId(
        that: this,
      );

  /// Verify only the event signature
  bool verifySignature() =>
      NostrSdk.instance.api.crateApiProtocolEventEventVerifySignature(
        that: this,
      );
}

@sealed
class EventsImpl extends RustOpaque implements Events {
  // Not to be used by end users
  EventsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EventsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_Events,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_Events,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_EventsPtr,
  );

  /// Check if contains `Event`
  bool contains({required Event event}) => NostrSdk.instance.api
      .crateApiDatabaseEventsEventsContains(that: this, event: event);

  /// Get first `Event` (descending order)
  Event? first() => NostrSdk.instance.api.crateApiDatabaseEventsEventsFirst(
        that: this,
      );

  /// Returns the number of events in the collection.
  bool isEmpty() => NostrSdk.instance.api.crateApiDatabaseEventsEventsIsEmpty(
        that: this,
      );

  /// Returns the number of events in the collection.
  BigInt len() => NostrSdk.instance.api.crateApiDatabaseEventsEventsLen(
        that: this,
      );

  /// Merge events collections into a single one.
  ///
  /// Collection is converted to unbounded if one of the merge `Events` have a different hash.
  /// In other words, the filter limit is respected only if the `Events` are related to the same
  /// list of filters.
  ///
  /// This method consumes the old `Events` collection and returns a new one!
  Events merge({required Events other}) => NostrSdk.instance.api
      .crateApiDatabaseEventsEventsMerge(that: this, other: other);

  /// Convert the collection to vector of events.
  ///
  /// This method consumes the `Events` collection!
  List<Event> toVec() =>
      NostrSdk.instance.api.crateApiDatabaseEventsEventsToVec(
        that: this,
      );
}

@sealed
class FilterImpl extends RustOpaque implements Filter {
  // Not to be used by end users
  FilterImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FilterImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_Filter,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_Filter,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_FilterPtr,
  );

  String asJson() => NostrSdk.instance.api.crateApiProtocolFilterFilterAsJson(
        that: this,
      );

  /// Add event author Public Key
  Filter author({required PublicKey author}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterAuthor(that: this, author: author);

  Filter authors({required List<PublicKey> authors}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterAuthors(that: this, authors: authors);

  Filter customTag({required SingleLetterTag tag, required String content}) =>
      NostrSdk.instance.api.crateApiProtocolFilterFilterCustomTag(
          that: this, tag: tag, content: content);

  Filter customTags(
          {required SingleLetterTag tag, required List<String> content}) =>
      NostrSdk.instance.api.crateApiProtocolFilterFilterCustomTags(
          that: this, tag: tag, content: content);

  /// Add event ID (`e` tag)
  Filter event({required EventId id}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterEvent(that: this, id: id);

  /// Add event IDs (`e` tag)
  Filter events({required List<EventId> ids}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterEvents(that: this, ids: ids);

  Filter hashtag({required String hashtag}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterHashtag(that: this, hashtag: hashtag);

  Filter hashtags({required List<String> hashtags}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterHashtags(that: this, hashtags: hashtags);

  Filter id({required EventId id}) =>
      NostrSdk.instance.api.crateApiProtocolFilterFilterId(that: this, id: id);

  Filter identifier({required String identifier}) =>
      NostrSdk.instance.api.crateApiProtocolFilterFilterIdentifier(
          that: this, identifier: identifier);

  Filter identifiers({required List<String> identifiers}) =>
      NostrSdk.instance.api.crateApiProtocolFilterFilterIdentifiers(
          that: this, identifiers: identifiers);

  Filter ids({required List<EventId> ids}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterIds(that: this, ids: ids);

  bool isEmpty() => NostrSdk.instance.api.crateApiProtocolFilterFilterIsEmpty(
        that: this,
      );

  Filter kind({required int kind}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterKind(that: this, kind: kind);

  Filter kinds({required List<int> kinds}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterKinds(that: this, kinds: kinds);

  Filter limit({required BigInt limit}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterLimit(that: this, limit: limit);

  /// Determine if `Filter` match given `Event`.
  bool matchEvent({required Event event}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterMatchEvent(that: this, event: event);

  /// Add Public Key (`p` tag)
  Filter pubkey({required PublicKey pubkey}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterPubkey(that: this, pubkey: pubkey);

  /// Add Public Keys (`p` tag)
  Filter pubkeys({required List<PublicKey> pubkeys}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterPubkeys(that: this, pubkeys: pubkeys);

  Filter reference({required String reference}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterReference(that: this, reference: reference);

  Filter references({required List<String> references}) =>
      NostrSdk.instance.api.crateApiProtocolFilterFilterReferences(
          that: this, references: references);

  Filter removeAuthors({required List<PublicKey> authors}) => NostrSdk
      .instance.api
      .crateApiProtocolFilterFilterRemoveAuthors(that: this, authors: authors);

  Filter removeCustomTags(
          {required SingleLetterTag tag, required List<String> content}) =>
      NostrSdk.instance.api.crateApiProtocolFilterFilterRemoveCustomTags(
          that: this, tag: tag, content: content);

  Filter removeEvents({required List<EventId> ids}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterRemoveEvents(that: this, ids: ids);

  Filter removeHashtags({required List<String> hashtags}) =>
      NostrSdk.instance.api.crateApiProtocolFilterFilterRemoveHashtags(
          that: this, hashtags: hashtags);

  Filter removeIdentifiers({required List<String> identifiers}) =>
      NostrSdk.instance.api.crateApiProtocolFilterFilterRemoveIdentifiers(
          that: this, identifiers: identifiers);

  Filter removeIds({required List<EventId> ids}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterRemoveIds(that: this, ids: ids);

  Filter removeKinds({required List<int> kinds}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterRemoveKinds(that: this, kinds: kinds);

  Filter removeLimit() =>
      NostrSdk.instance.api.crateApiProtocolFilterFilterRemoveLimit(
        that: this,
      );

  Filter removePubkeys({required List<PublicKey> pubkeys}) => NostrSdk
      .instance.api
      .crateApiProtocolFilterFilterRemovePubkeys(that: this, pubkeys: pubkeys);

  Filter removeReferences({required List<String> references}) =>
      NostrSdk.instance.api.crateApiProtocolFilterFilterRemoveReferences(
          that: this, references: references);

  Filter removeSearch() =>
      NostrSdk.instance.api.crateApiProtocolFilterFilterRemoveSearch(
        that: this,
      );

  Filter removeSince() =>
      NostrSdk.instance.api.crateApiProtocolFilterFilterRemoveSince(
        that: this,
      );

  Filter removeUntil() =>
      NostrSdk.instance.api.crateApiProtocolFilterFilterRemoveUntil(
        that: this,
      );

  Filter search({required String text}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterSearch(that: this, text: text);

  Filter since({required BigInt timestamp}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterSince(that: this, timestamp: timestamp);

  Filter until({required BigInt timestamp}) => NostrSdk.instance.api
      .crateApiProtocolFilterFilterUntil(that: this, timestamp: timestamp);
}

@sealed
class KeysImpl extends RustOpaque implements Keys {
  // Not to be used by end users
  KeysImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  KeysImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_Keys,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_Keys,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_KeysPtr,
  );

  /// Get public key
  PublicKey publicKey() =>
      NostrSdk.instance.api.crateApiProtocolKeyKeysPublicKey(
        that: this,
      );

  /// Get secret key
  SecretKey secretKey() =>
      NostrSdk.instance.api.crateApiProtocolKeyKeysSecretKey(
        that: this,
      );
}

@sealed
class NostrDatabaseImpl extends RustOpaque implements NostrDatabase {
  // Not to be used by end users
  NostrDatabaseImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NostrDatabaseImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_NostrDatabase,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_NostrDatabase,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_NostrDatabasePtr,
  );

  Future<BigInt> count({required Filter filter}) => NostrSdk.instance.api
      .crateApiDatabaseNostrDatabaseCount(that: this, filter: filter);

  /// Delete all events that match the `Filter`
  Future<void> delete({required Filter filter}) => NostrSdk.instance.api
      .crateApiDatabaseNostrDatabaseDelete(that: this, filter: filter);

  /// Get [`Event`] by [`EventId`]
  Future<Event?> eventById({required EventId eventId}) => NostrSdk.instance.api
      .crateApiDatabaseNostrDatabaseEventById(that: this, eventId: eventId);

  Future<Events> query({required Filter filter}) => NostrSdk.instance.api
      .crateApiDatabaseNostrDatabaseQuery(that: this, filter: filter);

  /// Save [`Event`] into store
  Future<SaveEventStatus> saveEvent({required Event event}) =>
      NostrSdk.instance.api
          .crateApiDatabaseNostrDatabaseSaveEvent(that: this, event: event);

  /// Wipe all data
  Future<void> wipe() =>
      NostrSdk.instance.api.crateApiDatabaseNostrDatabaseWipe(
        that: this,
      );
}

@sealed
class NostrSignerImpl extends RustOpaque implements NostrSigner {
  // Not to be used by end users
  NostrSignerImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NostrSignerImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_NostrSigner,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_NostrSigner,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_NostrSignerPtr,
  );

  /// Get backend
  SignerBackend backend() =>
      NostrSdk.instance.api.crateApiProtocolSignerNostrSignerBackend(
        that: this,
      );

  /// Get public key
  Future<PublicKey> getPublicKey() =>
      NostrSdk.instance.api.crateApiProtocolSignerNostrSignerGetPublicKey(
        that: this,
      );

  /// Decrypt
  Future<String> nip04Decrypt(
          {required PublicKey publicKey, required String encryptedContent}) =>
      NostrSdk.instance.api.crateApiProtocolSignerNostrSignerNip04Decrypt(
          that: this, publicKey: publicKey, encryptedContent: encryptedContent);

  /// Encrypt
  Future<String> nip04Encrypt(
          {required PublicKey publicKey, required String content}) =>
      NostrSdk.instance.api.crateApiProtocolSignerNostrSignerNip04Encrypt(
          that: this, publicKey: publicKey, content: content);

  /// Decrypt
  Future<String> nip44Decrypt(
          {required PublicKey publicKey, required String content}) =>
      NostrSdk.instance.api.crateApiProtocolSignerNostrSignerNip44Decrypt(
          that: this, publicKey: publicKey, content: content);

  /// Encrypt
  Future<String> nip44Encrypt(
          {required PublicKey publicKey, required String content}) =>
      NostrSdk.instance.api.crateApiProtocolSignerNostrSignerNip44Encrypt(
          that: this, publicKey: publicKey, content: content);

  /// Sign event
  Future<Event> signEvent({required UnsignedEvent unsignedEvent}) =>
      NostrSdk.instance.api.crateApiProtocolSignerNostrSignerSignEvent(
          that: this, unsignedEvent: unsignedEvent);
}

@sealed
class PublicKeyImpl extends RustOpaque implements PublicKey {
  // Not to be used by end users
  PublicKeyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PublicKeyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_PublicKey,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_PublicKey,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_PublicKeyPtr,
  );

  /// Serialize to bech32
  String toBech32() =>
      NostrSdk.instance.api.crateApiProtocolKeyPublicKeyPublicKeyToBech32(
        that: this,
      );

  /// Serialize to bytes
  Uint8List toBytes() =>
      NostrSdk.instance.api.crateApiProtocolKeyPublicKeyPublicKeyToBytes(
        that: this,
      );

  /// Serialize to hex
  String toHex() =>
      NostrSdk.instance.api.crateApiProtocolKeyPublicKeyPublicKeyToHex(
        that: this,
      );

  /// Serialize as nostr URI
  String toNostrUri() =>
      NostrSdk.instance.api.crateApiProtocolKeyPublicKeyPublicKeyToNostrUri(
        that: this,
      );
}

@sealed
class SecretKeyImpl extends RustOpaque implements SecretKey {
  // Not to be used by end users
  SecretKeyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SecretKeyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_SecretKey,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_SecretKey,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_SecretKeyPtr,
  );

  /// Serialize to bech32
  String toBech32() =>
      NostrSdk.instance.api.crateApiProtocolKeySecretKeySecretKeyToBech32(
        that: this,
      );

  /// Serialize to hex
  String toSecretHex() =>
      NostrSdk.instance.api.crateApiProtocolKeySecretKeySecretKeyToSecretHex(
        that: this,
      );
}

@sealed
class SingleLetterTagImpl extends RustOpaque implements SingleLetterTag {
  // Not to be used by end users
  SingleLetterTagImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SingleLetterTagImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_SingleLetterTag,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_SingleLetterTag,
    rustArcDecrementStrongCountPtr: NostrSdk
        .instance.api.rust_arc_decrement_strong_count_SingleLetterTagPtr,
  );

  /// Check if it's lowercase
  bool isLowercase() =>
      NostrSdk.instance.api.crateApiProtocolFilterSingleLetterTagIsLowercase(
        that: this,
      );

  /// Check if it's uppercase
  bool isUppercase() =>
      NostrSdk.instance.api.crateApiProtocolFilterSingleLetterTagIsUppercase(
        that: this,
      );
}

@sealed
class SubscribeAutoCloseOptionsImpl extends RustOpaque
    implements SubscribeAutoCloseOptions {
  // Not to be used by end users
  SubscribeAutoCloseOptionsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SubscribeAutoCloseOptionsImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: NostrSdk
        .instance.api.rust_arc_increment_strong_count_SubscribeAutoCloseOptions,
    rustArcDecrementStrongCount: NostrSdk
        .instance.api.rust_arc_decrement_strong_count_SubscribeAutoCloseOptions,
    rustArcDecrementStrongCountPtr: NostrSdk.instance.api
        .rust_arc_decrement_strong_count_SubscribeAutoCloseOptionsPtr,
  );

  /// Close subscription when the policy is satisfied
  SubscribeAutoCloseOptions exitPolicy({required ReqExitPolicy policy}) =>
      NostrSdk.instance.api
          .crateApiRelayOptionsSubscribeAutoCloseOptionsExitPolicy(
              that: this, policy: policy);

  /// Automatically close subscription if no notifications/events are received within the duration.
  SubscribeAutoCloseOptions idleTimeout({Duration? timeout}) =>
      NostrSdk.instance.api
          .crateApiRelayOptionsSubscribeAutoCloseOptionsIdleTimeout(
              that: this, timeout: timeout);

  /// Automatically close subscription after duration.
  SubscribeAutoCloseOptions timeout({Duration? timeout}) =>
      NostrSdk.instance.api
          .crateApiRelayOptionsSubscribeAutoCloseOptionsTimeout(
              that: this, timeout: timeout);
}

@sealed
class TagImpl extends RustOpaque implements Tag {
  // Not to be used by end users
  TagImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TagImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_Tag,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_Tag,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_TagPtr,
  );

  /// Get array of strings
  List<String> asVec() =>
      NostrSdk.instance.api.crateApiProtocolEventTagTagAsVec(
        that: this,
      );

  /// Return the **first** tag value (index `1`), if exists.
  String? content() => NostrSdk.instance.api.crateApiProtocolEventTagTagContent(
        that: this,
      );

  /// Check if it's a protected event tag
  ///
  /// <https://github.com/nostr-protocol/nips/blob/master/70.md>
  bool isProtected() =>
      NostrSdk.instance.api.crateApiProtocolEventTagTagIsProtected(
        that: this,
      );

  /// Check if is a standard event tag with `reply` marker
  bool isReply() => NostrSdk.instance.api.crateApiProtocolEventTagTagIsReply(
        that: this,
      );

  /// Check if is a standard event tag with `root` marker
  bool isRoot() => NostrSdk.instance.api.crateApiProtocolEventTagTagIsRoot(
        that: this,
      );

  /// Get tag kind
  String kind() => NostrSdk.instance.api.crateApiProtocolEventTagTagKind(
        that: this,
      );

  /// Get array of strings
  List<String> toVec() =>
      NostrSdk.instance.api.crateApiProtocolEventTagTagToVec(
        that: this,
      );
}

@sealed
class UnsignedEventImpl extends RustOpaque implements UnsignedEvent {
  // Not to be used by end users
  UnsignedEventImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UnsignedEventImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_UnsignedEvent,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_UnsignedEvent,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_UnsignedEventPtr,
  );

  /// Add signature to unsigned event
  ///
  /// Internally verify the event.
  Event addSignature({required String sig}) => NostrSdk.instance.api
      .crateApiProtocolEventUnsignedUnsignedEventAddSignature(
          that: this, sig: sig);

  /// Serialize as JSON
  String asJson() =>
      NostrSdk.instance.api.crateApiProtocolEventUnsignedUnsignedEventAsJson(
        that: this,
      );

  /// Serialize as pretty JSON
  String asPrettyJson() => NostrSdk.instance.api
          .crateApiProtocolEventUnsignedUnsignedEventAsPrettyJson(
        that: this,
      );

  /// Get author
  PublicKey author() =>
      NostrSdk.instance.api.crateApiProtocolEventUnsignedUnsignedEventAuthor(
        that: this,
      );

  /// Get content
  String content() =>
      NostrSdk.instance.api.crateApiProtocolEventUnsignedUnsignedEventContent(
        that: this,
      );

  /// Get UNIX timestamp
  BigInt createdAt() =>
      NostrSdk.instance.api.crateApiProtocolEventUnsignedUnsignedEventCreatedAt(
        that: this,
      );

  /// Get event ID
  EventId? id() =>
      NostrSdk.instance.api.crateApiProtocolEventUnsignedUnsignedEventId(
        that: this,
      );

  /// Get kind
  int kind() =>
      NostrSdk.instance.api.crateApiProtocolEventUnsignedUnsignedEventKind(
        that: this,
      );

  /// Get tags
  List<Tag> tags() =>
      NostrSdk.instance.api.crateApiProtocolEventUnsignedUnsignedEventTags(
        that: this,
      );
}

@sealed
class UnwrappedGiftImpl extends RustOpaque implements UnwrappedGift {
  // Not to be used by end users
  UnwrappedGiftImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UnwrappedGiftImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_UnwrappedGift,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_UnwrappedGift,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_UnwrappedGiftPtr,
  );

  /// Get rumor
  UnsignedEvent rumor() =>
      NostrSdk.instance.api.crateApiProtocolNipsNip59UnwrappedGiftRumor(
        that: this,
      );

  /// Get sender public key
  PublicKey sender() =>
      NostrSdk.instance.api.crateApiProtocolNipsNip59UnwrappedGiftSender(
        that: this,
      );
}
