// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'database/events.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'protocol/event.dart';
import 'protocol/event/id.dart';
import 'protocol/filter.dart';
part 'database.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `deref`, `from`, `from`, `from`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<_NostrDatabase>>
abstract class NostrDatabase implements RustOpaqueInterface {
  Future<BigInt> count({required Filter filter});

  /// Delete all events that match the `Filter`
  Future<void> delete({required Filter filter});

  /// Get [`Event`] by [`EventId`]
  Future<Event?> eventById({required EventId eventId});

  /// LMDB backend
  static NostrDatabase lmdb({required String path}) =>
      NostrSdk.instance.api.crateApiDatabaseNostrDatabaseLmdb(path: path);

  Future<Events> query({required Filter filter});

  /// Save [`Event`] into store
  Future<SaveEventStatus> saveEvent({required Event event});

  /// Wipe all data
  Future<void> wipe();
}

/// Reason why event wasn't stored into the database
enum RejectedReason {
  /// Ephemeral events aren't expected to be stored
  ephemeral,

  /// The event already exists
  duplicate,

  /// The event was deleted
  deleted,

  /// The event is expired
  expired,

  /// The event was replaced
  replaced,

  /// Attempt to delete a non-owned event
  invalidDelete,

  /// Other reason
  other,
  ;
}

@freezed
sealed class SaveEventStatus with _$SaveEventStatus {
  const SaveEventStatus._();

  /// The event has been successfully saved
  const factory SaveEventStatus.success() = SaveEventStatus_Success;

  /// The event has been rejected
  const factory SaveEventStatus.rejected(
    RejectedReason field0,
  ) = SaveEventStatus_Rejected;
}
